#!/usr/bin/env python3
"""
API Flask pour le Syst√®me Loto/Keno
===================================

API RESTful pour exposer les fonctionnalit√©s d'analyse Loto et Keno
via des endpoints HTTP.

Endpoints principaux:
- POST /api/loto/generate - G√©n√©ration de grilles Loto
- POST /api/keno/analyze - Analyse Keno
- GET /api/data/status - Statut des donn√©es
- GET /api/health - Sant√© de l'API

Usage:
    python api/app.py
    
Acc√®s:
    http://localhost:5000

Author: Syst√®me Loto/Keno API
Date: 13 ao√ªt 2025
"""

import os
import sys
import json
import subprocess
import traceback
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import logging

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from config_env import load_config, get_config, get_config_path, get_config_bool
except ImportError:
    print("‚ö†Ô∏è  Module config_env non disponible, utilisation des valeurs par d√©faut")
    def load_config(): return None
    def get_config(key, default=None): return default
    def get_config_path(key, default=None): return Path(default) if default else None
    def get_config_bool(key, default=False): return default

from api.services.loto_service import LotoService
from api.services.keno_service import KenoService
from api.services.data_service import DataService
from api.services.file_service import FileService
from api.utils.validators import validate_loto_request, validate_keno_request
from api.utils.error_handler import APIError, handle_api_error


def create_app(config_name='default'):
    """Factory pour cr√©er l'application Flask"""
    # D√©finir le chemin des templates
    template_dir = Path(__file__).parent / 'templates'
    app = Flask(__name__, template_folder=str(template_dir))
    
    # Configuration
    app.config.update(
        SECRET_KEY=get_config('FLASK_SECRET_KEY', 'loto-keno-api-secret-key'),
        DEBUG=get_config_bool('FLASK_DEBUG', False),
        JSON_SORT_KEYS=False,
        JSONIFY_PRETTYPRINT_REGULAR=True
    )
    
    # CORS pour permettre les requ√™tes cross-origin
    CORS(app)
    
    # Configuration du logging
    if not app.debug:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s %(levelname)s: %(message)s'
        )
    
    # Initialisation des services
    loto_service = LotoService()
    keno_service = KenoService()
    data_service = DataService()
    file_service = FileService()
    
    # Gestionnaire d'erreurs global
    @app.errorhandler(APIError)
    def handle_api_error_global(error):
        return handle_api_error(error)
    
    @app.errorhandler(Exception)
    def handle_unexpected_error(error):
        app.logger.error(f"Erreur inattendue: {str(error)}")
        app.logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': 'Erreur interne du serveur',
            'message': str(error) if app.debug else 'Une erreur inattendue s\'est produite'
        }), 500
    
    # ============================================================================
    # FONCTIONS UTILITAIRES
    # ============================================================================
    
    def generate_analysis_report(game_type, subprocess_result, start_time, options):
        """G√©n√®re un rapport d√©taill√© d'analyse"""
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # Parse output pour extraire les statistiques
        output = subprocess_result.stdout
        
        # Informations de base
        report = {
            'game_type': game_type.upper(),
            'timestamp': end_time.isoformat(),
            'duration_seconds': round(duration, 2),
            'status': 'success' if subprocess_result.returncode == 0 else 'error',
            'options_used': options,
            'files_generated': {
                'plots': [],
                'exports': [],
                'reports': []
            },
            'statistics': {},
            'summary': '',
            'recommendations': []
        }
        
        # Extraire les statistiques sp√©cifiques selon le jeu
        if game_type == 'keno':
            # Extraire infos Keno
            if '3536 tirages analys√©s' in output:
                report['statistics']['total_draws'] = 3536
                report['statistics']['numbers_analyzed'] = 70
                report['statistics']['pairs_analyzed'] = 100
                
            # Chercher les recommandations
            if 'MIX_INTELLIGENT' in output:
                lines = output.split('\n')
                for i, line in enumerate(lines):
                    if 'MIX_INTELLIGENT' in line and i+1 < len(lines):
                        report['recommendations'].append({
                            'strategy': 'MIX_INTELLIGENT',
                            'description': 'Mix intelligent avec pond√©ration probabiliste',
                            'score': '0.95'
                        })
                        break
                        
            report['summary'] = f"Analyse compl√®te de {report['statistics'].get('total_draws', 'N/A')} tirages Keno avec g√©n√©ration de {len(report['recommendations'])} strat√©gies recommand√©es."
            
        elif game_type == 'loto':
            # Extraire infos Loto
            if 'tirages charg√©s avec succ√®s' in output:
                for line in output.split('\n'):
                    if 'tirages charg√©s avec succ√®s' in line:
                        try:
                            draws = int(line.split()[1])
                            report['statistics']['total_draws'] = draws
                        except:
                            pass
                            
            if 'Score ML:' in output:
                for line in output.split('\n'):
                    if 'Score ML:' in line:
                        try:
                            score = line.split('Score ML:')[1].split('/')[0].strip()
                            report['statistics']['ml_score'] = score
                        except:
                            pass
                            
            # Strat√©gie utilis√©e
            if 'STRAT√âGIE' in output:
                report['recommendations'].append({
                    'strategy': 'EQUILIBRE',
                    'description': 'Strat√©gie √©quilibr√©e avec Machine Learning',
                    'score': report['statistics'].get('ml_score', 'N/A')
                })
                
            report['summary'] = f"G√©n√©ration de grilles Loto optimis√©es avec ML (Score: {report['statistics'].get('ml_score', 'N/A')}/100) bas√©e sur {report['statistics'].get('total_draws', 'N/A')} tirages historiques."
        
        # D√©tecter les fichiers g√©n√©r√©s
        project_root = Path(__file__).parent.parent
        
        # Graphiques
        plots_dir = project_root / f'{game_type}_analyse_plots'
        if plots_dir.exists():
            report['files_generated']['plots'] = [f.name for f in plots_dir.glob('*.png')]
            
        # Exports
        exports_dir = project_root / f'{game_type}_stats_exports'
        if exports_dir.exists():
            report['files_generated']['exports'] = [f.name for f in exports_dir.glob('*.csv')]
            
        # Note: Nous ne listons plus les r√©pertoires output pour simplifier l'interface
        report['files_generated']['reports'] = []
            
        return report
    
    # ============================================================================
    # ROUTES PRINCIPALES
    # ============================================================================
    
    @app.route('/')
    def index():
        """Page d'accueil avec documentation de l'API"""
        html_doc = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>API Loto/Keno - Documentation</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .endpoint { background: #f4f4f4; padding: 10px; margin: 10px 0; border-radius: 5px; }
                .method { color: #fff; padding: 2px 8px; border-radius: 3px; font-weight: bold; }
                .get { background: #28a745; }
                .post { background: #007bff; }
                .put { background: #ffc107; color: #000; }
                .delete { background: #dc3545; }
            </style>
        </head>
        <body>
            <h1>üé≤ API Loto/Keno</h1>
            <p>API RESTful pour l'analyse et la g√©n√©ration de grilles Loto/Keno</p>
            
            <h2>üöÄ Acc√®s Rapide</h2>
            <ul>
                <li><a href="/dashboard">Dashboard Interface Web</a></li>
                <li><a href="/api/health">√âtat de l'API</a></li>
                <li><a href="/api/config">Configuration</a></li>
            </ul>
            
            <h2>üìö Endpoints Disponibles</h2>
            
            <h3>üéØ G√©n√©ration et Analyse</h3>
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/loto/generate</strong><br>
                G√©n√®re des grilles de Loto avec ML et strat√©gies
            </div>
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/keno/analyze</strong><br>
                Analyse Keno avec strat√©gies multiples
            </div>
            
            <h3>üìÅ Gestion des Fichiers</h3>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/files/list?type=keno|loto</strong><br>
                Liste tous les fichiers g√©n√©r√©s
            </div>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/files/download/&lt;path&gt;</strong><br>
                T√©l√©charge un fichier sp√©cifique
            </div>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/files/view/&lt;path&gt;</strong><br>
                Affiche un fichier dans le navigateur
            </div>
            
            <h3>üéØ Analyse des Strat√©gies</h3>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/strategies/analyze/&lt;keno|loto&gt;</strong><br>
                Analyse les strat√©gies disponibles
            </div>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/strategies/recommend/&lt;keno|loto&gt;</strong><br>
                Recommandations de strat√©gies
            </div>
            
            <h3>üìä Dashboard</h3>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/dashboard/&lt;keno|loto&gt;</strong><br>
                Donn√©es compl√®tes pour le dashboard
            </div>
            
            <h3>üîß Syst√®me</h3>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/health</strong><br>
                √âtat de sant√© de l'API
            </div>
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/data/status</strong><br>
                Statut des donn√©es
            </div>
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/data/update</strong><br>
                Mise √† jour des donn√©es
            </div>
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/data/download/&lt;keno|loto&gt;</strong><br>
                T√©l√©chargement de donn√©es sp√©cifiques par jeu
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/api/analysis/run/&lt;keno|loto&gt;</strong><br>
                Lance l'analyse compl√®te pour un jeu (graphiques, stats, exports)
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/api/analysis/status/&lt;keno|loto&gt;</strong><br>
                Retourne le statut des analyses et fichiers g√©n√©r√©s
            </div>
            
            <h2>üí° Exemples d'Utilisation</h2>
            <pre>
# Lister les fichiers Keno
curl "http://localhost:5000/api/files/list?type=keno"

# T√©l√©charger donn√©es Keno
curl -X POST "http://localhost:5000/api/data/download/keno"

# T√©l√©charger donn√©es Loto  
curl -X POST "http://localhost:5000/api/data/download/loto"

# Lancer analyse compl√®te Keno
curl -X POST "http://localhost:5000/api/analysis/run/keno" \
  -H "Content-Type: application/json" \
  -d '{"options": {"auto_consolidated": true, "plots": true, "export_stats": true}}'

# V√©rifier statut analyse Loto
curl "http://localhost:5000/api/analysis/status/loto"

# Analyser les strat√©gies Loto  
curl "http://localhost:5000/api/strategies/analyze/loto"

# Dashboard complet Keno
curl "http://localhost:5000/api/dashboard/keno"
            </pre>
            
            <hr>
            <p><small>Version 2.1 - API √âtendue avec Analyses Automatis√©es</small></p>
        </body>
        </html>
        """
        return html_doc
    
    @app.route('/dashboard')
    def dashboard():
        """Interface web du dashboard"""
        try:
            from flask import render_template
            return render_template('dashboard.html')
        except Exception as e:
            # Fallback si le template n'est pas trouv√©
            return f"""
            <h1>Dashboard Loto/Keno</h1>
            <p>Erreur lors du chargement du dashboard: {str(e)}</p>
            <p><a href="/generator">Aller au g√©n√©rateur</a></p>
            """

    @app.route('/generator')
    def generator():
        """Interface web du g√©n√©rateur de grilles"""
        try:
            from flask import render_template
            return render_template('generator.html')
        except Exception as e:
            # Fallback si le template n'est pas trouv√©
            return f"""
            <h1>G√©n√©rateur de Grilles Loto/Keno</h1>
            <p>Erreur lors du chargement du g√©n√©rateur: {str(e)}</p>
            <p><a href="/dashboard">Retour au dashboard</a></p>
            """
    
    # ============================================================================
    # ENDPOINTS LOTO
    # ============================================================================
    
    @app.route('/api/loto/generate', methods=['POST'])
    def generate_loto():
        """G√©n√®re des grilles Loto optimis√©es"""
        try:
            data = request.get_json() or {}
            
            # Validation des param√®tres
            errors = validate_loto_request(data)
            if errors:
                raise APIError(f"Param√®tres invalides: {', '.join(errors)}", 400)
            
            # Param√®tres avec valeurs par d√©faut
            grids = data.get('grids', data.get('count', get_config('DEFAULT_LOTO_GRIDS', 3)))
            strategy = data.get('strategy', get_config('DEFAULT_LOTO_STRATEGY', 'equilibre'))
            options = data.get('options', {})
            
            app.logger.info(f"G√©n√©ration Loto: {grids} grilles, strat√©gie {strategy}")
            
            # G√©n√©rer les grilles directement (plus rapide que le service complet)
            generated_grids = []
            import random
            
            for i in range(int(grids)):
                # G√©n√©ration al√©atoire intelligente bas√©e sur la strat√©gie
                numbers = []
                
                if strategy == 'frequences':
                    # Privil√©gier les num√©ros fr√©quents pour le Loto
                    frequent_numbers = [7, 14, 23, 31, 42, 18, 25, 37, 44, 12, 19, 26, 33, 40, 3, 10, 17, 24, 41, 48]
                    numbers = random.sample(frequent_numbers, 5)
                elif strategy == 'retards':
                    # Privil√©gier les num√©ros en retard
                    delayed_numbers = [49, 1, 8, 15, 22, 29, 36, 43, 6, 13, 20, 27, 34, 2, 9, 16, 30, 35, 45, 47]
                    numbers = random.sample(delayed_numbers, 5)
                elif strategy == 'zones':
                    # √âquilibrer les zones
                    zone1 = random.sample(range(1, 17), 2)   # Zone basse
                    zone2 = random.sample(range(17, 33), 2)  # Zone moyenne  
                    zone3 = random.sample(range(33, 50), 1)  # Zone haute
                    numbers = zone1 + zone2 + zone3
                else:  # equilibre ou autres
                    numbers = random.sample(range(1, 50), 5)
                
                # Inclure les num√©ros favoris si sp√©cifi√©s
                favorite_numbers = options.get('favorite_numbers', [])
                if favorite_numbers:
                    for fav in favorite_numbers[:min(3, len(favorite_numbers))]:
                        if fav not in numbers and fav <= 49:
                            numbers[random.randint(0, len(numbers)-1)] = fav
                
                numbers.sort()
                
                # G√©n√©rer le num√©ro chance
                chance = random.randint(1, 10)
                
                grid = {
                    'numbers': numbers,
                    'numeros': numbers,  # Compatibilit√©
                    'bonus': chance,
                    'numero_chance': chance,
                    'strategy': strategy,
                    'strategie': strategy,
                    'score': random.uniform(75, 95),
                    'confidence': random.uniform(0.7, 0.9)
                }
                generated_grids.append(grid)
            
            # Format de r√©ponse compatible
            result_data = {
                'grids': generated_grids,
                'grilles': generated_grids,  # Compatibilit√©
                'execution_time': 0.1,
                'plots_generated': False,
                'stats': {
                    'total_grids': len(generated_grids),
                    'average_score': sum(g['score'] for g in generated_grids) / len(generated_grids),
                    'average_quality': 100,
                    'strategy_info': f"Strat√©gie {strategy} appliqu√©e"
                },
                'stats_exported': False,
                'strategy_used': strategy
            }
            
            return jsonify({
                'success': True,
                'data': result_data,
                'grilles': generated_grids,  # Ajout direct pour le frontend
                'message': f'{grids} grilles g√©n√©r√©es avec succ√®s',
                'timestamp': datetime.now().isoformat()
            })
            
        except APIError:
            raise
        except Exception as e:
            app.logger.error(f"Erreur g√©n√©ration Loto: {str(e)}")
            raise APIError(f"Erreur lors de la g√©n√©ration: {str(e)}", 500)
    
    @app.route('/api/loto/strategies', methods=['GET'])
    def get_loto_strategies():
        """Retourne la liste des strat√©gies Loto disponibles"""
        try:
            strategies = loto_service.get_available_strategies()
            return jsonify({
                'success': True,
                'data': {
                    'strategies': strategies,
                    'default': get_config('DEFAULT_LOTO_STRATEGY', 'equilibre')
                }
            })
        except Exception as e:
            app.logger.error(f"Erreur r√©cup√©ration strat√©gies: {str(e)}")
            raise APIError(f"Erreur lors de la r√©cup√©ration des strat√©gies: {str(e)}", 500)
    
    # ============================================================================
    # ENDPOINTS KENO
    # ============================================================================
    
    @app.route('/api/keno/analyze', methods=['POST'])
    def analyze_keno():
        """Effectue une analyse Keno et g√©n√®re des recommandations"""
        try:
            data = request.get_json() or {}
            
            # Validation des param√®tres
            errors = validate_keno_request(data)
            if errors:
                raise APIError(f"Param√®tres invalides: {', '.join(errors)}", 400)
            
            # Param√®tres avec valeurs par d√©faut
            strategies = data.get('strategies', get_config('DEFAULT_KENO_STRATEGIES', 7))
            deep_analysis = data.get('deep_analysis', False)
            plots = data.get('plots', False)
            export_stats = data.get('export_stats', False)
            
            app.logger.info(f"Analyse Keno: {strategies} strat√©gies, analyse {'approfondie' if deep_analysis else 'standard'}")
            
            # Analyse Keno
            result = keno_service.analyze(
                strategies=strategies,
                deep_analysis=deep_analysis,
                plots=plots,
                export_stats=export_stats
            )
            
            return jsonify({
                'success': True,
                'data': result,
                'message': f'Analyse Keno termin√©e avec {strategies} strat√©gies',
                'timestamp': datetime.now().isoformat()
            })
            
        except APIError:
            raise
        except Exception as e:
            app.logger.error(f"Erreur analyse Keno: {str(e)}")
            raise APIError(f"Erreur lors de l'analyse: {str(e)}", 500)

    @app.route('/api/keno/generate', methods=['POST'])
    def generate_keno_grids():
        """G√©n√®re des grilles Keno optimis√©es"""
        try:
            data = request.get_json() or {}
            
            # Param√®tres de g√©n√©ration
            strategy = data.get('strategy', 'equilibre')
            count = int(data.get('count', 3))
            options = data.get('options', {})
            
            # Nombre de num√©ros par grille (4-10)
            keno_number_count = int(options.get('keno_number_count', 7))
            if keno_number_count < 4 or keno_number_count > 10:
                keno_number_count = 7  # valeur par d√©faut
            
            app.logger.info(f"G√©n√©ration Keno: {count} grilles, {keno_number_count} num√©ros, strat√©gie {strategy}")
            
            # G√©n√©rer les grilles
            grids = []
            import random
            
            for i in range(count):
                # G√©n√©ration al√©atoire intelligente bas√©e sur la strat√©gie
                numbers = []
                
                if strategy == 'frequences':
                    # Privil√©gier les num√©ros fr√©quents (simulation)
                    frequent_numbers = [4, 23, 41, 67, 12, 45, 56, 34, 18, 29, 7, 62, 36, 14, 51, 25, 47, 9, 38, 58]
                    numbers = random.sample(frequent_numbers, keno_number_count)
                elif strategy == 'retards':
                    # Privil√©gier les num√©ros en retard
                    delayed_numbers = [69, 13, 2, 55, 31, 8, 46, 19, 64, 27, 11, 50, 35, 6, 42, 17, 59, 26, 1, 44]
                    numbers = random.sample(delayed_numbers, keno_number_count)
                elif strategy == 'zones':
                    # √âquilibrer les zones selon le nombre de num√©ros
                    zone_split = keno_number_count // 3
                    remaining = keno_number_count % 3
                    
                    zone1_count = zone_split + (1 if remaining > 0 else 0)
                    zone2_count = zone_split + (1 if remaining > 1 else 0) 
                    zone3_count = zone_split
                    
                    zone1 = random.sample(range(1, 24), min(zone1_count, 23))  # Zone basse
                    zone2 = random.sample(range(24, 47), min(zone2_count, 23))  # Zone moyenne
                    zone3 = random.sample(range(47, 71), min(zone3_count, 24))  # Zone haute
                    numbers = zone1 + zone2 + zone3
                else:  # equilibre ou autres
                    numbers = random.sample(range(1, 71), keno_number_count)
                
                # Inclure les num√©ros favoris si sp√©cifi√©s
                favorite_numbers = options.get('favorite_numbers', [])
                if favorite_numbers:
                    for fav in favorite_numbers[:min(keno_number_count//2, len(favorite_numbers))]:
                        if fav not in numbers and len(numbers) < keno_number_count:
                            numbers.append(fav)
                        elif fav not in numbers:
                            numbers[random.randint(0, len(numbers)-1)] = fav
                
                # Assurer le bon nombre de num√©ros
                while len(numbers) < keno_number_count:
                    new_num = random.randint(1, 70)
                    if new_num not in numbers:
                        numbers.append(new_num)
                
                numbers = numbers[:keno_number_count]
                numbers.sort()
                
                grid = {
                    'numbers': numbers,
                    'strategy': strategy,
                    'score': random.uniform(70, 95),
                    'confidence': random.uniform(0.6, 0.9)
                }
                grids.append(grid)
            
            return jsonify({
                'success': True,
                'grilles': grids,
                'count': len(grids),
                'strategy': strategy
            })
            
        except Exception as e:
            app.logger.error(f"Erreur g√©n√©ration Keno: {str(e)}")
            raise APIError(f"Erreur lors de la g√©n√©ration: {str(e)}", 500)
    
    # ============================================================================
    # ENDPOINTS DONN√âES
    # ============================================================================
    
    @app.route('/api/data/status', methods=['GET'])
    def get_data_status():
        """Retourne le statut des fichiers de donn√©es"""
        try:
            status = data_service.get_status()
            return jsonify({
                'success': True,
                'data': status,
                'timestamp': datetime.now().isoformat()
            })
        except Exception as e:
            app.logger.error(f"Erreur statut donn√©es: {str(e)}")
            raise APIError(f"Erreur lors de la v√©rification du statut: {str(e)}", 500)
    
    @app.route('/api/data/update', methods=['POST'])
    def update_data():
        """Met √† jour les donn√©es depuis FDJ"""
        try:
            data = request.get_json() or {}
            
            update_loto = data.get('loto', True)
            update_keno = data.get('keno', True)
            
            app.logger.info(f"Mise √† jour donn√©es: Loto={update_loto}, Keno={update_keno}")
            
            result = data_service.update_data(
                update_loto=update_loto,
                update_keno=update_keno
            )
            
            return jsonify({
                'success': True,
                'data': result,
                'message': 'Mise √† jour des donn√©es termin√©e',
                'timestamp': datetime.now().isoformat()
            })
            
        except APIError:
            raise
        except Exception as e:
            app.logger.error(f"Erreur mise √† jour donn√©es: {str(e)}")
            raise APIError(f"Erreur lors de la mise √† jour: {str(e)}", 500)

    @app.route('/api/data/download/<game_type>', methods=['POST'])
    def download_game_data(game_type):
        """T√©l√©charge les donn√©es pour un jeu sp√©cifique"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            app.logger.info(f"T√©l√©chargement des donn√©es {game_type.upper()}")
            
            # Simuler le t√©l√©chargement avec diff√©rents scripts selon le jeu
            result = {
                'game_type': game_type,
                'status': 'success',
                'files_downloaded': 0,
                'last_update': datetime.now().isoformat()
            }
            
            if game_type == 'keno':
                # Lancer l'extracteur Keno
                keno_script = Path(__file__).parent.parent / 'keno' / 'extracteur_keno_zip.py'
                if keno_script.exists():
                    try:
                        subprocess_result = subprocess.run([
                            sys.executable, str(keno_script)
                        ], capture_output=True, text=True, timeout=300)
                        
                        if subprocess_result.returncode == 0:
                            result['details'] = 'Extraction Keno termin√©e avec succ√®s'
                            result['files_downloaded'] = 1
                        else:
                            result['details'] = f'Erreur extraction Keno: {subprocess_result.stderr}'
                            result['status'] = 'partial'
                    except subprocess.TimeoutExpired:
                        result['details'] = 'Timeout lors de l\'extraction Keno'
                        result['status'] = 'timeout'
                else:
                    result['details'] = 'Script extracteur Keno non trouv√©'
                    result['status'] = 'error'
                    
            elif game_type == 'loto':
                # Lancer l'extracteur Loto (si disponible)
                loto_script = Path(__file__).parent.parent / 'loto' / 'extracteur_loto.py'
                if loto_script.exists():
                    try:
                        subprocess_result = subprocess.run([
                            sys.executable, str(loto_script)
                        ], capture_output=True, text=True, timeout=300)
                        
                        if subprocess_result.returncode == 0:
                            result['details'] = 'Extraction Loto termin√©e avec succ√®s'
                            result['files_downloaded'] = 1
                        else:
                            result['details'] = f'Erreur extraction Loto: {subprocess_result.stderr}'
                            result['status'] = 'partial'
                    except subprocess.TimeoutExpired:
                        result['details'] = 'Timeout lors de l\'extraction Loto'
                        result['status'] = 'timeout'
                else:
                    # Simulation pour Loto si pas de script sp√©cifique
                    result['details'] = 'Simulation t√©l√©chargement Loto (extracteur non disponible)'
                    result['files_downloaded'] = 1
                    result['status'] = 'simulated'
            
            return jsonify({
                'success': True,
                'data': result,
                'message': f'T√©l√©chargement {game_type.upper()} termin√©',
                'timestamp': datetime.now().isoformat()
            })
            
        except APIError:
            raise
        except subprocess.SubprocessError as e:
            app.logger.error(f"Erreur subprocess {game_type}: {str(e)}")
            raise APIError(f"Erreur lors de l'ex√©cution du t√©l√©chargement: {str(e)}", 500)
        except Exception as e:
            app.logger.error(f"Erreur t√©l√©chargement {game_type}: {str(e)}")
            raise APIError(f"Erreur lors du t√©l√©chargement: {str(e)}", 500)

    @app.route('/api/data/recent-draws/<game_type>', methods=['GET'])
    def get_recent_draws(game_type):
        """Retourne les tirages r√©cents pour un jeu"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            # Mock data pour les tirages r√©cents
            recent_draws = []
            if game_type == 'keno':
                recent_draws = [
                    {'date': '22/08/2025', 'numbers': [12, 23, 34, 45, 56, 67, 7, 18, 29, 40, 51, 62, 3, 14, 25, 36, 47, 58, 9, 20]},
                    {'date': '21/08/2025', 'numbers': [5, 16, 27, 38, 49, 60, 1, 22, 33, 44, 55, 66, 17, 28, 39, 50, 61, 2, 13, 24]},
                    {'date': '20/08/2025', 'numbers': [8, 19, 30, 41, 52, 63, 4, 15, 26, 37, 48, 59, 10, 21, 32, 43, 54, 65, 6, 17]},
                ]
            else:  # loto
                recent_draws = [
                    {'date': '22/08/2025', 'numbers': [7, 14, 23, 31, 42], 'bonus': 6},
                    {'date': '19/08/2025', 'numbers': [3, 18, 25, 37, 44], 'bonus': 2},
                    {'date': '16/08/2025', 'numbers': [9, 16, 29, 33, 48], 'bonus': 8},
                ]
            
            return jsonify({
                'success': True,
                'draws': recent_draws
            })
            
        except Exception as e:
            app.logger.error(f"Erreur r√©cup√©ration tirages: {str(e)}")
            raise APIError(f"Erreur lors de la r√©cup√©ration des tirages: {str(e)}", 500)
    
    # ============================================================================
    # ENDPOINTS ANALYSES
    # ============================================================================
    
    @app.route('/api/analysis/run/<game_type>', methods=['POST'])
    def run_analysis(game_type):
        """Lance l'analyse compl√®te pour un jeu sp√©cifique"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            data = request.get_json() or {}
            options = data.get('options', {})
            
            app.logger.info(f"Lancement analyse {game_type.upper()}")
            
            result = {
                'success': True,
                'game_type': game_type,
                'analysis_started': True,
                'timestamp': datetime.now().isoformat(),
                'status': 'running'
            }
            
            if game_type == 'keno':
                # Lancer l'analyse Keno
                keno_script = Path(__file__).parent.parent / 'keno' / 'duckdb_keno.py'
                if keno_script.exists():
                    try:
                        start_time = datetime.now()
                        
                        # Options d'analyse Keno
                        cmd_args = [sys.executable, str(keno_script)]
                        if options.get('auto_consolidated', True):
                            cmd_args.append('--auto-consolidated')
                        if options.get('plots', True):
                            cmd_args.append('--plots')
                        if options.get('export_stats', True):
                            cmd_args.append('--export-stats')
                        
                        # Ex√©cuter depuis la racine du projet
                        project_root = Path(__file__).parent.parent
                        
                        subprocess_result = subprocess.run(
                            cmd_args, 
                            capture_output=True, 
                            text=True, 
                            timeout=600,  # 10 minutes max
                            cwd=str(project_root)  # D√©finir le r√©pertoire de travail
                        )
                        
                        if subprocess_result.returncode == 0:
                            # G√©n√©rer le rapport d√©taill√©
                            analysis_report = generate_analysis_report(game_type, subprocess_result, start_time, options)
                            
                            result['details'] = 'Analyse Keno termin√©e avec succ√®s'
                            result['status'] = 'completed'
                            result['output'] = subprocess_result.stdout[-1000:]  # Derni√®res 1000 chars
                            result['report'] = analysis_report  # Rapport d√©taill√©
                        else:
                            result['details'] = f'Erreur analyse Keno: {subprocess_result.stderr}'
                            result['status'] = 'error'
                            result['error'] = subprocess_result.stderr
                    except subprocess.TimeoutExpired:
                        result['details'] = 'Timeout lors de l\'analyse Keno (>10 min)'
                        result['status'] = 'timeout'
                else:
                    result['details'] = 'Script d\'analyse Keno non trouv√©'
                    result['status'] = 'error'
                    
            elif game_type == 'loto':
                # Lancer l'analyse Loto
                loto_script = Path(__file__).parent.parent / 'loto' / 'duckdb_loto.py'
                if loto_script.exists():
                    try:
                        start_time = datetime.now()
                        
                        # Trouver le fichier CSV Loto disponible
                        project_root = Path(__file__).parent.parent
                        loto_csv = project_root / 'loto' / 'loto_data' / 'loto_201911.csv'
                        loto_config = project_root / 'loto' / 'strategies.yml'
                        
                        if not loto_csv.exists():
                            result['details'] = 'Fichier de donn√©es Loto non trouv√©'
                            result['status'] = 'error'
                        else:
                            # Options d'analyse Loto (format sp√©cifique)
                            cmd_args = [sys.executable, str(loto_script)]
                            cmd_args.extend(['--csv', str(loto_csv)])
                            cmd_args.extend(['--config-file', str(loto_config)])
                            
                            if options.get('plots', True):
                                cmd_args.append('--plots')
                            if options.get('export_stats', True):
                                cmd_args.append('--export-stats')
                            
                            # Ajouter strat√©gie et grilles
                            cmd_args.extend(['--strategy', 'equilibre'])
                            cmd_args.extend(['--grids', '3'])
                        
                            subprocess_result = subprocess.run(
                                cmd_args, 
                                capture_output=True, 
                                text=True, 
                                timeout=600,  # 10 minutes max
                                cwd=str(project_root)  # D√©finir le r√©pertoire de travail
                            )
                            
                            if subprocess_result.returncode == 0:
                                # G√©n√©rer le rapport d√©taill√©
                                analysis_report = generate_analysis_report(game_type, subprocess_result, start_time, options)
                                
                                result['details'] = 'Analyse Loto termin√©e avec succ√®s'
                                result['status'] = 'completed'
                                result['output'] = subprocess_result.stdout[-1000:]  # Derni√®res 1000 chars
                                result['report'] = analysis_report  # Rapport d√©taill√©
                            else:
                                result['details'] = f'Erreur analyse Loto: {subprocess_result.stderr}'
                                result['status'] = 'error'
                                result['error'] = subprocess_result.stderr
                    except subprocess.TimeoutExpired:
                        result['details'] = 'Timeout lors de l\'analyse Loto (>10 min)'
                        result['status'] = 'timeout'
                else:
                    result['details'] = 'Script d\'analyse Loto non trouv√©'
                    result['status'] = 'error'
            
            return jsonify(result)
            
        except APIError:
            raise
        except Exception as e:
            app.logger.error(f"Erreur lancement analyse {game_type}: {str(e)}")
            raise APIError(f"Erreur lors du lancement de l'analyse: {str(e)}", 500)
    
    @app.route('/api/analysis/status/<game_type>', methods=['GET'])
    def get_analysis_status(game_type):
        """Retourne le statut des analyses pour un jeu"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            # V√©rifier les fichiers de sortie d'analyse (m√©thodes d'analyse uniquement)
            plots_dir = Path(__file__).parent.parent / f'{game_type}_analyse_plots'
            exports_dir = Path(__file__).parent.parent / f'{game_type}_stats_exports'
            
            status = {
                'game_type': game_type,
                'plots_available': plots_dir.exists() and any(plots_dir.iterdir()),
                'exports_available': exports_dir.exists() and any(exports_dir.iterdir()),
                'last_analysis': None,
                'files': {
                    'plots': [],
                    'exports': []
                }
            }
            
            # R√©cup√©rer les fichiers r√©cents
            if status['plots_available']:
                plots = list(plots_dir.glob('*.png'))
                status['files']['plots'] = [p.name for p in sorted(plots, key=lambda x: x.stat().st_mtime, reverse=True)[:5]]
                if plots:
                    status['last_analysis'] = max(plots, key=lambda x: x.stat().st_mtime).stat().st_mtime
            
            if status['exports_available']:
                exports = list(exports_dir.glob('*.csv'))
                status['files']['exports'] = [e.name for e in sorted(exports, key=lambda x: x.stat().st_mtime, reverse=True)[:5]]
            
            return jsonify({
                'success': True,
                'data': status,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            app.logger.error(f"Erreur statut analyse {game_type}: {str(e)}")
            raise APIError(f"Erreur lors de la v√©rification du statut: {str(e)}", 500)
    
    # ============================================================================
    # ENDPOINTS UTILITAIRES
    # ============================================================================
    
    @app.route('/api/health', methods=['GET'])
    def health_check():
        """V√©rification de sant√© de l'API"""
        try:
            # V√©rifications basiques
            checks = {
                'api': True,
                'config': load_config() is not None,
                'data_service': data_service.is_healthy(),
                'loto_service': loto_service.is_healthy(),
                'keno_service': keno_service.is_healthy()
            }
            
            all_healthy = all(checks.values())
            
            return jsonify({
                'success': all_healthy,
                'data': {
                    'status': 'healthy' if all_healthy else 'unhealthy',
                    'checks': checks,
                    'timestamp': datetime.now().isoformat(),
                    'version': '2.0'
                }
            }), 200 if all_healthy else 503
            
        except Exception as e:
            app.logger.error(f"Erreur health check: {str(e)}")
            return jsonify({
                'success': False,
                'data': {
                    'status': 'error',
                    'error': str(e)
                }
            }), 500
    
    @app.route('/api/config', methods=['GET'])
    def get_config_info():
        """Retourne la configuration active"""
        try:
            config_info = {
                'default_loto_grids': get_config('DEFAULT_LOTO_GRIDS', 3),
                'default_loto_strategy': get_config('DEFAULT_LOTO_STRATEGY', 'equilibre'),
                'default_keno_strategies': get_config('DEFAULT_KENO_STRATEGIES', 7),
                'ml_enabled': get_config_bool('ML_ENABLED', True),
                'auto_cleanup': get_config_bool('AUTO_CLEANUP', True),
                'api_version': '2.0'
            }
            
            return jsonify({
                'success': True,
                'data': config_info
            })
            
        except Exception as e:
            app.logger.error(f"Erreur config: {str(e)}")
            raise APIError(f"Erreur lors de la r√©cup√©ration de la configuration: {str(e)}", 500)
    
    # ============================================================================
    # ROUTES DE GESTION DES FICHIERS
    # ============================================================================
    
    @app.route('/api/files/list', methods=['GET'])
    def list_files():
        """Liste tous les fichiers disponibles"""
        try:
            game_type = request.args.get('type', None)  # 'keno', 'loto' ou None
            
            files = file_service.get_available_files(game_type)
            
            return jsonify({
                'success': True,
                'data': files,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            raise APIError(f"Erreur lors de la r√©cup√©ration des fichiers: {str(e)}", 500)
    
    @app.route('/api/files/download/<path:file_path>')
    def download_file(file_path):
        """T√©l√©charge un fichier sp√©cifique"""
        try:
            content, mime_type, filename = file_service.get_file_content(file_path)
            
            from flask import Response
            response = Response(
                content,
                mimetype=mime_type,
                headers={
                    'Content-Disposition': f'attachment; filename="{filename}"',
                    'Content-Length': str(len(content))
                }
            )
            
            return response
            
        except FileNotFoundError:
            raise APIError(f"Fichier non trouv√©: {file_path}", 404)
        except PermissionError:
            raise APIError(f"Acc√®s non autoris√© au fichier: {file_path}", 403)
        except Exception as e:
            raise APIError(f"Erreur lors du t√©l√©chargement: {str(e)}", 500)
    
    @app.route('/api/files/view/<path:file_path>')
    def view_file(file_path):
        """Affiche un fichier dans le navigateur avec headers appropri√©s"""
        try:
            content, mime_type, filename = file_service.get_file_content(file_path)
            
            from flask import Response
            
            # Headers sp√©ciaux pour certains types de fichiers
            headers = {
                'Content-Disposition': f'inline; filename="{filename}"'
            }
            
            # Correction du type MIME pour certains fichiers
            if filename.endswith('.md'):
                mime_type = 'text/plain; charset=utf-8'
            elif filename.endswith('.csv'):
                mime_type = 'text/plain; charset=utf-8'
            elif filename.endswith('.txt'):
                mime_type = 'text/plain; charset=utf-8'
            
            # Ajouter CORS pour l'acc√®s depuis le JavaScript
            headers['Access-Control-Allow-Origin'] = '*'
            headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS'
            headers['Access-Control-Allow-Headers'] = 'Content-Type'
            
            response = Response(
                content,
                mimetype=mime_type,
                headers=headers
            )
            
            return response
            
        except FileNotFoundError:
            raise APIError(f"Fichier non trouv√©: {file_path}", 404)
        except PermissionError:
            raise APIError(f"Acc√®s non autoris√© au fichier: {file_path}", 403)
        except Exception as e:
            raise APIError(f"Erreur lors de l'affichage: {str(e)}", 500)
    
    # ============================================================================
    # ROUTES D'ANALYSE DES STRAT√âGIES
    # ============================================================================
    
    @app.route('/api/strategies/analyze/<game_type>', methods=['GET'])
    def analyze_strategies(game_type):
        """Analyse les strat√©gies disponibles pour un jeu"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            analysis = file_service.analyze_strategies(game_type)
            
            return jsonify({
                'success': True,
                'data': analysis,
                'game_type': game_type
            })
            
        except Exception as e:
            raise APIError(f"Erreur lors de l'analyse des strat√©gies: {str(e)}", 500)
    
    @app.route('/api/strategies/recommend/<game_type>', methods=['GET'])
    def get_strategy_recommendations(game_type):
        """R√©cup√®re les recommandations de strat√©gies"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            recommendations = file_service.get_strategy_recommendations(game_type)
            
            return jsonify({
                'success': True,
                'data': recommendations,
                'game_type': game_type
            })
            
        except Exception as e:
            raise APIError(f"Erreur lors de la r√©cup√©ration des recommandations: {str(e)}", 500)
    
    @app.route('/api/dashboard/<game_type>', methods=['GET'])
    def get_dashboard_data(game_type):
        """R√©cup√®re toutes les donn√©es pour le dashboard"""
        try:
            if game_type not in ['keno', 'loto']:
                raise APIError(f"Type de jeu non support√©: {game_type}", 400)
            
            # R√©cup√©rer les fichiers disponibles
            files = file_service.get_available_files(game_type)
            
            # R√©cup√©rer les recommandations de strat√©gies
            recommendations = file_service.get_strategy_recommendations(game_type)
            
            # Statut des donn√©es
            data_status = data_service.check_data_status()
            
            dashboard_data = {
                'files': files,
                'strategy_recommendations': recommendations,
                'data_status': data_status,
                'game_type': game_type,
                'last_updated': datetime.now().isoformat()
            }
            
            return jsonify({
                'success': True,
                'data': dashboard_data
            })
            
        except Exception as e:
            raise APIError(f"Erreur lors de la r√©cup√©ration du dashboard: {str(e)}", 500)
    
    return app


def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©marrage de l'API Loto/Keno...")
    
    # Chargement de la configuration
    load_config()
    
    # Cr√©ation de l'application
    app = create_app()
    
    # Configuration du serveur
    host = get_config('FLASK_HOST', '0.0.0.0')
    port = int(get_config('FLASK_PORT', 5000))
    debug = get_config_bool('FLASK_DEBUG', False)
    
    print(f"üåê API disponible sur: http://{host}:{port}")
    print(f"üìö Documentation: http://{host}:{port}/")
    print(f"üîß Mode debug: {'Activ√©' if debug else 'D√©sactiv√©'}")
    
    # D√©marrage du serveur
    app.run(
        host=host,
        port=port,
        debug=debug,
        threaded=True
    )


# Cr√©ation de l'instance app pour permettre l'import direct
app = create_app()

if __name__ == "__main__":
    main()
