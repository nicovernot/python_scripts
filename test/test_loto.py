#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST LOTO - V√©rification compl√®te du syst√®me Loto
===================================================

Teste que tous les composants Loto fonctionnent correctement avec le CSV t√©l√©charg√©.
"""

import os
import sys
from pathlib import Path

# Ajouter le projet au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_loto_csv_availability():
    """Teste que le fichier CSV Loto est disponible"""
    csv_path = project_root / "loto" / "loto_data" / "loto_201911.csv"
    
    print("üéØ TEST DU SYST√àME LOTO")
    print("=" * 50)
    
    # Test 1: V√©rifier que le CSV existe
    print("\n1. V√©rification du fichier CSV t√©l√©charg√©...")
    if csv_path.exists():
        size_mb = csv_path.stat().st_size / (1024*1024)
        print(f"   ‚úÖ CSV trouv√© : {csv_path.name}")
        print(f"   üìä Taille : {size_mb:.1f} MB")
    else:
        print(f"   ‚ùå CSV manquant : {csv_path}")
        print("   üí° Ex√©cutez d'abord : python loto/result.py")
        return False
    
    # Test 2: V√©rifier le contenu du CSV
    print("\n2. V√©rification du contenu du CSV...")
    try:
        import pandas as pd
        df = pd.read_csv(csv_path, delimiter=';', nrows=5)
        print(f"   ‚úÖ CSV lisible avec {len(df.columns)} colonnes")
        
        # V√©rifier les colonnes essentielles
        ball_columns = [col for col in df.columns if 'boule' in col.lower()]
        print(f"   üé± Colonnes de boules d√©tect√©es : {len(ball_columns)}")
        
        if len(ball_columns) >= 5:
            print("   ‚úÖ Format Loto valide (5+ boules)")
            return True
        else:
            print("   ‚ö†Ô∏è Format Loto possiblement invalide")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur de lecture CSV : {e}")
        return False

def test_loto_scripts_configuration():
    """Teste que les scripts Loto sont configur√©s pour utiliser le bon CSV"""
    scripts_to_test = [
        "loto/strategies.py",
        "loto/grilles.py",
        "loto/duckdb_loto.py"
    ]
    
    print("\n3. V√©rification de la configuration des scripts...")
    
    all_configured = True
    
    for script_path in scripts_to_test:
        full_path = project_root / script_path
        if full_path.exists():
            print(f"   üìÑ {script_path}")
            
            # Lire le contenu du script pour v√©rifier les chemins
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifier les anciens chemins (ne doit plus √™tre pr√©sent)
                old_paths_found = []
                if 'T√©l√©chargements' in content:
                    old_paths_found.append('T√©l√©chargements')
                if 'loto_201911.parquet' in content:
                    old_paths_found.append('parquet')
                
                # V√©rifier les nouveaux chemins (doit √™tre pr√©sent)
                new_paths_found = []
                if 'loto_data/loto_201911.csv' in content:
                    new_paths_found.append('CSV t√©l√©charg√©')
                
                if old_paths_found:
                    print(f"      ‚ö†Ô∏è Anciens chemins d√©tect√©s : {old_paths_found}")
                    all_configured = False
                
                if new_paths_found:
                    print(f"      ‚úÖ Nouveaux chemins d√©tect√©s : {new_paths_found}")
                else:
                    print(f"      ‚ùì Configuration √† v√©rifier - aucun chemin CSV d√©tect√©")
                    
            except Exception as e:
                print(f"      ‚ùå Erreur de lecture : {e}")
                all_configured = False
        else:
            print(f"   ‚ùå Script non trouv√© : {script_path}")
            all_configured = False
    
    return all_configured

def test_loto_duckdb_execution():
    """Teste l'ex√©cution du script principal duckdb_loto.py"""
    print("\n4. Test d'ex√©cution de duckdb_loto.py...")
    
    csv_path = project_root / "loto" / "loto_data" / "loto_201911.csv"
    
    if not csv_path.exists():
        print("   ‚ùå CSV non disponible pour le test")
        return False
    
    try:
        # Test d'import du module
        print("   üîß Test d'import du module...")
        from loto.duckdb_loto import LotoStrategist
        print("   ‚úÖ Import r√©ussi")
        
        # Test d'initialisation
        print("   üîß Test d'initialisation...")
        config_path = project_root / "loto" / "strategies.yml"
        strategist = LotoStrategist(config_file=str(config_path))
        print("   ‚úÖ Initialisation r√©ussie")
        
        # Test de chargement CSV
        print("   üîß Test de chargement CSV...")
        import duckdb
        db_con = duckdb.connect(':memory:')
        table_name = strategist.load_data_from_csv(str(csv_path), db_con)
        print(f"   ‚úÖ CSV charg√© dans la table : {table_name}")
        
        # Test de g√©n√©ration d'une grille simple
        print("   üîß Test de g√©n√©ration de grille...")
        grids = strategist.generate_grids(db_con, table_name, 1)
        if grids and len(grids) > 0:
            print(f"   ‚úÖ Grille g√©n√©r√©e : {grids[0]}")
        else:
            print("   ‚ö†Ô∏è Aucune grille g√©n√©r√©e")
        
        db_con.close()
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur d'ex√©cution : {e}")
        import traceback
        traceback.print_exc()
        return False

def test_loto_download_script():
    """Teste le script de t√©l√©chargement Loto"""
    print("\n5. Test du script de t√©l√©chargement...")
    
    try:
        # Test d'import
        from loto.result import main as loto_download_main
        print("   ‚úÖ Import du script de t√©l√©chargement r√©ussi")
        
        # V√©rifier que le script peut √™tre appel√© (sans l'ex√©cuter)
        download_script = project_root / "loto" / "result.py"
        if download_script.exists():
            print("   ‚úÖ Script de t√©l√©chargement disponible")
            return True
        else:
            print("   ‚ùå Script de t√©l√©chargement manquant")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur de test du t√©l√©chargement : {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS LOTO")
    print("=" * 60)
    
    all_tests_passed = True
    error_summary = []
    
    # Test 1: Disponibilit√© du CSV
    if not test_loto_csv_availability():
        all_tests_passed = False
        error_summary.append("CSV Loto non disponible ou invalide")
    
    # Test 2: Configuration des scripts
    if not test_loto_scripts_configuration():
        all_tests_passed = False
        error_summary.append("Configuration des scripts incorrecte")
    
    # Test 3: Ex√©cution du script principal
    if not test_loto_duckdb_execution():
        all_tests_passed = False
        error_summary.append("Erreur d'ex√©cution du script principal")
    
    # Test 4: Script de t√©l√©chargement
    if not test_loto_download_script():
        all_tests_passed = False
        error_summary.append("Script de t√©l√©chargement d√©faillant")
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ TOUS LES TESTS LOTO R√âUSSIS")
        print("‚úÖ Le syst√®me Loto est op√©rationnel")
        print("\nüöÄ Commandes utiles :")
        print("   python loto/result.py                    # T√©l√©charger les donn√©es")
        print("   python loto/duckdb_loto.py --grids 3     # G√©n√©rer 3 grilles")
        return True
    else:
        print("‚ùå √âCHEC DES TESTS LOTO")
        print("\nüîç R√©sum√© des erreurs:")
        for error in error_summary:
            print(f"   ‚Ä¢ {error}")
        return False

if __name__ == "__main__":
    sys.exit(0 if main() else 1)
