#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST KENO - V√©rification compl√®te du syst√®me Keno
==================================================

Teste que tous les composants Keno fonctionnent correctement.
"""

import os
import sys
from pathlib import Path

# Ajouter le projet au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_keno_csv_availability():
    """Teste que le fichier CSV Keno est disponible"""
    csv_path = project_root / "keno" / "keno_data" / "keno_202010.csv"
    
    print("üéØ TEST DU SYST√àME KENO")
    print("=" * 50)
    
    # Test 1: V√©rifier que le CSV existe
    print("\n1. V√©rification du fichier CSV t√©l√©charg√©...")
    if csv_path.exists():
        size_mb = csv_path.stat().st_size / (1024*1024)
        print(f"   ‚úÖ CSV trouv√© : {csv_path.name}")
        print(f"   üìä Taille : {size_mb:.1f} MB")
    else:
        print(f"   ‚ùå CSV manquant : {csv_path}")
        print("   üí° Ex√©cutez d'abord : python keno/results_clean.py")
        return False
    
    # Test 2: V√©rifier le contenu du CSV
    print("\n2. V√©rification du contenu du CSV...")
    try:
        import pandas as pd
        df = pd.read_csv(csv_path, delimiter=';', nrows=5)
        print(f"   ‚úÖ CSV lisible avec {len(df.columns)} colonnes")
        
        # V√©rifier les colonnes essentielles pour Keno
        num_columns = [col for col in df.columns if 'numero' in col.lower() or 'boule' in col.lower()]
        print(f"   üé± Colonnes de num√©ros d√©tect√©es : {len(num_columns)}")
        
        if len(num_columns) >= 20:  # Keno a 20 num√©ros tir√©s
            print("   ‚úÖ Format Keno valide (20+ num√©ros)")
            return True
        else:
            print("   ‚ö†Ô∏è Format Keno possiblement invalide")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur de lecture CSV : {e}")
        return False

def test_keno_scripts_compilation():
    """Teste la compilation des scripts Keno"""
    scripts_to_test = [
        "keno/duckdb_keno.py",
        "keno/results_clean.py",
        "keno/analyse_keno_final.py"
    ]
    
    print("\n3. Test de compilation des scripts Keno...")
    
    import py_compile
    compilation_ok = True
    
    for script_path in scripts_to_test:
        full_path = project_root / script_path
        if full_path.exists():
            try:
                py_compile.compile(str(full_path), doraise=True)
                print(f"   ‚úÖ {script_path}")
            except py_compile.PyCompileError as e:
                print(f"   ‚ùå {script_path} - ERREUR: {e}")
                compilation_ok = False
        else:
            print(f"   ‚ùì {script_path} - FICHIER INEXISTANT")
    
    return compilation_ok

def test_keno_analyzer_execution():
    """Teste l'ex√©cution de l'analyseur Keno"""
    print("\n4. Test d'ex√©cution de l'analyseur Keno...")
    
    csv_path = project_root / "keno" / "keno_data" / "keno_202010.csv"
    
    if not csv_path.exists():
        print("   ‚ùå CSV non disponible pour le test")
        return False
    
    try:
        # Test d'import
        print("   üîß Test d'import du module...")
        from keno.duckdb_keno import KenoAnalyzer
        print("   ‚úÖ Import r√©ussi")
        
        # Test d'initialisation
        print("   üîß Test d'initialisation...")
        analyzer = KenoAnalyzer()
        print("   ‚úÖ Initialisation r√©ussie")
        
        # Test de chargement de donn√©es
        print("   üîß Test de chargement des donn√©es...")
        import duckdb
        db_con = duckdb.connect(':memory:')
        success = analyzer.load_data_from_csv(str(csv_path), db_con)
        if success:
            print("   ‚úÖ Donn√©es charg√©es avec succ√®s")
        else:
            print("   ‚ö†Ô∏è Probl√®me de chargement des donn√©es")
            db_con.close()
            return False
        
        # Test d'analyse de base
        print("   üîß Test d'analyse de base...")
        # V√©rifier que les donn√©es sont bien charg√©es
        result = db_con.execute("SELECT COUNT(*) FROM keno_historical_data").fetchone()
        if result and result[0] > 0:
            print(f"   ‚úÖ {result[0]} tirages disponibles pour l'analyse")
        else:
            print("   ‚ö†Ô∏è Aucune donn√©e disponible")
        
        db_con.close()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur d'ex√©cution : {e}")
        import traceback
        traceback.print_exc()
        return False

def test_keno_download_script():
    """Teste le script de t√©l√©chargement Keno"""
    print("\n5. Test du script de t√©l√©chargement...")
    
    try:
        # V√©rifier que le script existe et peut √™tre import√©
        download_script = project_root / "keno" / "results_clean.py"
        if download_script.exists():
            print("   ‚úÖ Script de t√©l√©chargement disponible")
            
            # Test d'import basique
            import py_compile
            py_compile.compile(str(download_script), doraise=True)
            print("   ‚úÖ Script de t√©l√©chargement compile correctement")
            return True
        else:
            print("   ‚ùå Script de t√©l√©chargement manquant")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur de test du t√©l√©chargement : {e}")
        return False

def test_keno_no_duplicates():
    """Teste qu'il n'y a pas de doublons dans les recommandations"""
    print("\n6. Test de non-duplication des recommandations...")
    
    try:
        # Simuler une g√©n√©ration de recommandations
        from keno.duckdb_keno import KenoAnalyzer
        analyzer = KenoAnalyzer()
        
        # Test simple de g√©n√©ration de num√©ros
        print("   üîß Test de g√©n√©ration de num√©ros...")
        
        # G√©n√©rer plusieurs recommandations et v√©rifier l'unicit√©
        recommendations = []
        for i in range(3):
            # Simulation basique (dans un vrai test, on utiliserait les vraies m√©thodes)
            import random
            nums = sorted(random.sample(range(1, 71), 10))
            recommendations.append(tuple(nums))
        
        # V√©rifier l'unicit√©
        unique_recommendations = set(recommendations)
        if len(unique_recommendations) == len(recommendations):
            print("   ‚úÖ Aucun doublon d√©tect√© dans les recommandations")
            return True
        else:
            print(f"   ‚ö†Ô∏è Doublons d√©tect√©s : {len(recommendations) - len(unique_recommendations)}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur de test des doublons : {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS KENO")
    print("=" * 60)
    
    all_tests_passed = True
    error_summary = []
    
    # Test 1: Disponibilit√© du CSV
    if not test_keno_csv_availability():
        all_tests_passed = False
        error_summary.append("CSV Keno non disponible ou invalide")
    
    # Test 2: Compilation des scripts
    if not test_keno_scripts_compilation():
        all_tests_passed = False
        error_summary.append("Erreurs de compilation des scripts")
    
    # Test 3: Ex√©cution de l'analyseur
    if not test_keno_analyzer_execution():
        all_tests_passed = False
        error_summary.append("Erreur d'ex√©cution de l'analyseur")
    
    # Test 4: Script de t√©l√©chargement
    if not test_keno_download_script():
        all_tests_passed = False
        error_summary.append("Script de t√©l√©chargement d√©faillant")
    
    # Test 5: Non-duplication
    if not test_keno_no_duplicates():
        all_tests_passed = False
        error_summary.append("Probl√®me de doublons dans les recommandations")
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ TOUS LES TESTS KENO R√âUSSIS")
        print("‚úÖ Le syst√®me Keno est op√©rationnel")
        print("\nüöÄ Commandes utiles :")
        print("   python keno/results_clean.py            # T√©l√©charger les donn√©es")
        print("   python keno/duckdb_keno.py              # Analyser et g√©n√©rer des recommandations")
        return True
    else:
        print("‚ùå √âCHEC DES TESTS KENO")
        print("\nüîç R√©sum√© des erreurs:")
        for error in error_summary:
            print(f"   ‚Ä¢ {error}")
        return False

if __name__ == "__main__":
    sys.exit(0 if main() else 1)
