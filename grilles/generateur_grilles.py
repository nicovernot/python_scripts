#!/usr/bin/env python3
"""
G√©n√©rateur de Grilles Loto - Syst√®mes R√©duits
=============================================

G√©n√©rateur de grilles Loto bas√© sur la th√©orie des syst√®mes r√©duits.
Permet de cr√©er un nombre optimal de grilles √† partir d'une liste de num√©ros favoris.

Th√©orie des Syst√®mes R√©duits :
- Maximise les chances de gain avec un nombre minimal de grilles
- Garantit un certain niveau de couverture des combinaisons
- Optimise la r√©partition des num√©ros dans les grilles

Usage:
    python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 5
    python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 10 --garantie 3
    python generateur_grilles.py --fichier mes_nombres.txt --grilles 8 --export
    python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 5 --nombres-utilises 8

Auteur: Syst√®me Loto/Keno
Date: 14 ao√ªt 2025
"""

import argparse
import itertools
import random
import sys
import json
import csv
from pathlib import Path
from typing import List, Tuple, Set, Dict, Any
from datetime import datetime
import math

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from config_env import get_config, get_config_bool, get_config_int
except ImportError:
    def get_config(key, default=None): return default
    def get_config_bool(key, default=False): return default
    def get_config_int(key, default=0): return default

# Imports pour l'optimisation
try:
    import pulp
    PULP_AVAILABLE = True
except ImportError:
    PULP_AVAILABLE = False
    print("‚ö†Ô∏è  PuLP non disponible. Installation recommand√©e : pip install pulp")

try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False
    print("‚ö†Ô∏è  Pandas non disponible. Installation recommand√©e : pip install pandas")


class SystemeReduit:
    """
    G√©n√©rateur de syst√®mes r√©duits pour le Loto
    
    Principe : √Ä partir d'une liste de N num√©ros favoris (g√©n√©ralement 8-15),
    g√©n√®re le nombre minimal de grilles pour garantir un certain niveau de gain.
    """
    
    def __init__(self, nombres_favoris: List[int], garantie: int = 3, taille_grille: int = 5):
        """
        Initialise le syst√®me r√©duit
        
        Args:
            nombres_favoris: Liste des num√©ros favoris (8-20 num√©ros)
            garantie: Niveau de garantie (2, 3, 4 ou 5)
                     garantie=3 : si 5 bons num√©ros dans les favoris, 
                                 garantit au moins un 3 dans une grille
            taille_grille: Nombre de num√©ros par grille (5 pour Loto, 10 pour Keno)
        """
        self.nombres_favoris = sorted(list(set(nombres_favoris)))
        self.garantie = garantie
        self.taille_grille = taille_grille
        self.nb_favoris = len(self.nombres_favoris)
        
        # Validation
        if self.nb_favoris < self.taille_grille:
            raise ValueError(f"Il faut au minimum {self.taille_grille} num√©ros favoris pour des grilles de {self.taille_grille} num√©ros")
        if self.nb_favoris > 20:
            raise ValueError("Maximum 20 num√©ros favoris")
        if self.garantie < 2 or self.garantie > 5:
            raise ValueError("La garantie doit √™tre entre 2 et 5")
        
        print(f"üéØ Syst√®me r√©duit initialis√© :")
        print(f"   Num√©ros favoris : {self.nombres_favoris}")
        print(f"   Nombre de favoris : {self.nb_favoris}")
        print(f"   Garantie : {self.garantie}")
    
    def calculer_couverture_theorique(self, nb_grilles: int) -> Dict[str, float]:
        """Calcule la couverture th√©orique du syst√®me"""
        
        # Nombre total de combinaisons possibles avec les favoris
        total_combinaisons = math.comb(self.nb_favoris, self.taille_grille)
        
        # Estimation de la couverture
        if nb_grilles >= total_combinaisons:
            couverture = 100.0
        else:
            # Formule empirique bas√©e sur la th√©orie des syst√®mes r√©duits
            couverture = min(100.0, (nb_grilles / total_combinaisons) * 100 * 1.2)
        
        # Probabilit√© de gain selon la garantie
        prob_garantie = self._calculer_probabilite_garantie(nb_grilles)
        
        return {
            'couverture_combinaisons': couverture,
            'probabilite_garantie': prob_garantie,
            'total_combinaisons_theoriques': total_combinaisons,
            'efficacite': (prob_garantie / nb_grilles) * 100
        }
    
    def _calculer_probabilite_garantie(self, nb_grilles: int) -> float:
        """Calcule la probabilit√© d'atteindre la garantie"""
        
        # Formules empiriques bas√©es sur la th√©orie des syst√®mes r√©duits
        if self.garantie == 2:
            return min(95.0, nb_grilles * 8.0)
        elif self.garantie == 3:
            return min(85.0, nb_grilles * 6.0)
        elif self.garantie == 4:
            return min(70.0, nb_grilles * 4.0)
        else:  # garantie == 5
            return min(50.0, nb_grilles * 2.0)
    
    def generer_grilles_optimales(self, nb_grilles: int) -> List[List[int]]:
        """
        G√©n√®re des grilles selon la m√©thode des syst√®mes r√©duits optimaux
        
        M√©thode :
        1. G√©n√®re toutes les combinaisons possibles avec les favoris
        2. S√©lectionne les combinaisons qui maximisent la couverture
        3. Applique des algorithmes d'optimisation pour minimiser les redondances
        """
        
        print(f"\nüîÑ G√©n√©ration de {nb_grilles} grilles optimales...")
        
        # √âtape 1 : G√©n√©rer toutes les combinaisons possibles
        toutes_combinaisons = list(itertools.combinations(self.nombres_favoris, self.taille_grille))
        print(f"   Combinaisons th√©oriques : {len(toutes_combinaisons)}")
        
        if nb_grilles >= len(toutes_combinaisons):
            # Si on demande plus de grilles que de combinaisons possibles
            print("   ‚ö†Ô∏è  Nombre de grilles >= combinaisons possibles")
            grilles_selectionnees = toutes_combinaisons[:nb_grilles]
        else:
            # S√©lection optimale par algorithme de couverture
            grilles_selectionnees = self._selection_optimale(toutes_combinaisons, nb_grilles)
        
        # Conversion en listes tri√©es
        grilles_finales = [sorted(list(grille)) for grille in grilles_selectionnees]
        
        print(f"   ‚úÖ {len(grilles_finales)} grilles g√©n√©r√©es")
        return grilles_finales
    
    def _selection_optimale(self, combinaisons: List[Tuple], nb_grilles: int) -> List[Tuple]:
        """
        S√©lectionne les meilleures combinaisons selon l'algorithme de couverture maximale
        
        Algorithme :
        1. Commence par la combinaison qui couvre le plus de sous-ensembles
        2. Ajoute it√©rativement les combinaisons qui augmentent le plus la couverture
        3. √âvite les redondances maximales
        """
        
        if nb_grilles >= len(combinaisons):
            return combinaisons
        
        # Strat√©gie de s√©lection √©quilibr√©e
        if nb_grilles <= 10:
            # Pour peu de grilles : s√©lection par espacement maximal
            return self._selection_par_espacement(combinaisons, nb_grilles)
        else:
            # Pour beaucoup de grilles : s√©lection par couverture
            return self._selection_par_couverture(combinaisons, nb_grilles)
    
    def _selection_par_espacement(self, combinaisons: List[Tuple], nb_grilles: int) -> List[Tuple]:
        """S√©lection par espacement maximal entre les grilles"""
        
        selected = []
        remaining = list(combinaisons)
        
        # Premi√®re grille : celle avec la meilleure r√©partition
        first_grille = self._choisir_grille_equilibree(remaining)
        selected.append(first_grille)
        remaining.remove(first_grille)
        
        # Grilles suivantes : maximiser la distance avec les pr√©c√©dentes
        for _ in range(nb_grilles - 1):
            if not remaining:
                break
            
            meilleure_grille = None
            meilleur_score = -1
            
            for grille in remaining:
                score = self._calculer_score_espacement(grille, selected)
                if score > meilleur_score:
                    meilleur_score = score
                    meilleure_grille = grille
            
            if meilleure_grille:
                selected.append(meilleure_grille)
                remaining.remove(meilleure_grille)
        
        return selected
    
    def _selection_par_couverture(self, combinaisons: List[Tuple], nb_grilles: int) -> List[Tuple]:
        """S√©lection par maximisation de la couverture"""
        
        # Pour un grand nombre de grilles, utilise un √©chantillonnage intelligent
        step = len(combinaisons) // nb_grilles
        
        selected = []
        for i in range(0, len(combinaisons), step):
            if len(selected) >= nb_grilles:
                break
            selected.append(combinaisons[i])
        
        # Compl√®te avec des grilles al√©atoires si n√©cessaire
        while len(selected) < nb_grilles and len(selected) < len(combinaisons):
            remaining = [c for c in combinaisons if c not in selected]
            if remaining:
                selected.append(random.choice(remaining))
        
        return selected
    
    def _choisir_grille_equilibree(self, grilles: List[Tuple]) -> Tuple:
        """Choisit la grille la plus √©quilibr√©e (bonne r√©partition des num√©ros)"""
        
        meilleure_grille = None
        meilleur_score = -1
        
        for grille in grilles[:100]:  # Limite pour performance
            # Score bas√© sur la r√©partition des num√©ros
            ecart_type = self._calculer_ecart_type(grille)
            repartition = self._calculer_repartition_zones(grille)
            
            score = (1.0 / (1.0 + ecart_type)) + repartition
            
            if score > meilleur_score:
                meilleur_score = score
                meilleure_grille = grille
        
        return meilleure_grille or grilles[0]
    
    def _calculer_score_espacement(self, grille: Tuple, grilles_selectionnees: List[Tuple]) -> float:
        """Calcule le score d'espacement d'une grille par rapport aux grilles d√©j√† s√©lectionn√©es"""
        
        if not grilles_selectionnees:
            return 1.0
        
        distances = []
        for grille_sel in grilles_selectionnees:
            # Distance = nombre de num√©ros diff√©rents
            distance = len(set(grille) - set(grille_sel))
            distances.append(distance)
        
        # Score = distance minimale (on veut maximiser la distance minimale)
        return min(distances)
    
    def _calculer_ecart_type(self, grille: Tuple) -> float:
        """Calcule l'√©cart-type des num√©ros dans une grille"""
        grille_list = list(grille)
        moyenne = sum(grille_list) / len(grille_list)
        variance = sum((x - moyenne) ** 2 for x in grille_list) / len(grille_list)
        return math.sqrt(variance)
    
    def _calculer_repartition_zones(self, grille: Tuple) -> float:
        """Calcule la qualit√© de r√©partition par zones (1-10, 11-20, 21-30, 31-40, 41-49)"""
        
        zones = [0] * 5  # 5 zones de 10 num√©ros chacune
        
        for numero in grille:
            zone = min(4, (numero - 1) // 10)
            zones[zone] += 1
        
        # Score : favorise les grilles avec r√©partition √©quilibr√©e
        zones_occupees = sum(1 for z in zones if z > 0)
        return zones_occupees / 5.0
    
    def generer_grilles_aleatoires_intelligentes(self, nb_grilles: int) -> List[List[int]]:
        """
        G√©n√®re des grilles avec une approche al√©atoire intelligente
        
        Combine :
        - S√©lection al√©atoire dans les favoris
        - Optimisations pour √©viter les doublons exacts
        - Garantie de diversit√©
        - Gestion des cas o√π il y a peu de num√©ros favoris
        """
        
        print(f"\nüé≤ G√©n√©ration de {nb_grilles} grilles al√©atoires intelligentes...")
        
        grilles = []
        
        # Cas sp√©cial : Si on a exactement le nombre de num√©ros requis pour une grille
        if len(self.nombres_favoris) == self.taille_grille:
            # On ne peut faire qu'une seule grille avec tous les num√©ros
            grille_unique = sorted(self.nombres_favoris)
            for i in range(nb_grilles):
                grilles.append(grille_unique.copy())
            print(f"   ‚ö†Ô∏è  Une seule combinaison possible (tous les num√©ros favoris)")
        
        # Cas sp√©cial : Pas assez de num√©ros favoris
        elif len(self.nombres_favoris) < self.taille_grille:
            # Impossible de g√©n√©rer des grilles compl√®tes
            taille_possible = len(self.nombres_favoris)
            print(f"   ‚ö†Ô∏è  R√©duction taille grille: {self.taille_grille} -> {taille_possible} num√©ros")
            grille_reduite = sorted(self.nombres_favoris)
            for i in range(nb_grilles):
                grilles.append(grille_reduite.copy())
        
        # Cas normal : Assez de num√©ros pour faire des combinaisons vari√©es
        else:
            tentatives_max = nb_grilles * 10
            
            for i in range(nb_grilles):
                tentatives = 0
                while tentatives < tentatives_max:
                    # G√©n√®re une grille candidate
                    grille = sorted(random.sample(self.nombres_favoris, self.taille_grille))
                    
                    # V√©rifie qu'elle n'existe pas d√©j√†
                    if grille not in grilles:
                        grilles.append(grille)
                        break
                    
                    tentatives += 1
                
                # Si impossible de trouver une grille unique, force l'ajout
                if len(grilles) <= i:
                    grille = sorted(random.sample(self.nombres_favoris, self.taille_grille))
                    grilles.append(grille)
        
        print(f"   ‚úÖ {len(grilles)} grilles g√©n√©r√©es")
        return grilles
    
    def analyser_grilles(self, grilles: List[List[int]]) -> Dict[str, Any]:
        """Analyse la qualit√© des grilles g√©n√©r√©es"""
        
        if not grilles:
            return {'erreur': 'Aucune grille √† analyser'}
        
        # Statistiques de base
        nb_grilles = len(grilles)
        grilles_uniques = len(set(tuple(g) for g in grilles))
        pourcentage_unique = (grilles_uniques / nb_grilles) * 100
        
        # Analyse de la r√©partition des num√©ros
        compteur_numeros = {}
        for grille in grilles:
            for numero in grille:
                compteur_numeros[numero] = compteur_numeros.get(numero, 0) + 1
        
        # Num√©ros les plus/moins utilis√©s
        numeros_tries = sorted(compteur_numeros.items(), key=lambda x: x[1], reverse=True)
        plus_utilises = numeros_tries[:5]
        moins_utilises = numeros_tries[-5:]
        
        # Analyse de la couverture
        couverture = self.calculer_couverture_theorique(nb_grilles)
        
        # Score de qualit√© global
        score_qualite = self._calculer_score_qualite(grilles, couverture)
        
        return {
            'nb_grilles': nb_grilles,
            'grilles_uniques': grilles_uniques,
            'pourcentage_unique': pourcentage_unique,
            'plus_utilises': plus_utilises,
            'moins_utilises': moins_utilises,
            'couverture': couverture,
            'score_qualite': score_qualite,
            'recommandation': self._generer_recommandation(score_qualite, pourcentage_unique)
        }
    
    def _calculer_score_qualite(self, grilles: List[List[int]], couverture: Dict) -> float:
        """Calcule un score de qualit√© global sur 100"""
        
        # Facteurs de qualit√©
        uniqueness = len(set(tuple(g) for g in grilles)) / len(grilles)
        coverage = couverture['couverture_combinaisons'] / 100
        efficiency = couverture['efficacite'] / 100
        
        # Score pond√©r√©
        score = (uniqueness * 40) + (coverage * 35) + (efficiency * 25)
        return min(100, score * 100)
    
    def _generer_recommandation(self, score_qualite: float, pourcentage_unique: float) -> str:
        """G√©n√®re une recommandation bas√©e sur l'analyse"""
        
        if score_qualite >= 80 and pourcentage_unique >= 95:
            return "üü¢ Excellent syst√®me - Qualit√© optimale"
        elif score_qualite >= 60 and pourcentage_unique >= 85:
            return "üü° Bon syst√®me - Quelques am√©liorations possibles"
        elif score_qualite >= 40:
            return "üü† Syst√®me moyen - Recommand√© d'augmenter le nombre de favoris"
        else:
            return "üî¥ Syst√®me √† am√©liorer - Revoir les param√®tres"


class SystemeReduitOptimise:
    """
    G√©n√©rateur de syst√®mes r√©duits optimis√© utilisant les CSV TOP et PuLP
    
    Cette classe utilise :
    - Les fichiers TOP 25 Loto / TOP 30 Keno pour s√©lectionner les meilleurs num√©ros
    - L'optimisation PuLP pour minimiser le nombre de grilles tout en maximisant la couverture
    - Des algorithmes avanc√©s de r√©duction de syst√®mes
    """
    
    def __init__(self, jeu: str, taille_grille: int = None):
        """
        Initialise le syst√®me r√©duit optimis√©
        
        Args:
            jeu: 'loto' ou 'keno'
            taille_grille: Nombre de num√©ros par grille (d√©faut: 5 pour Loto, 10 pour Keno)
        """
        self.jeu = jeu.lower()
        
        if self.jeu == 'loto':
            self.csv_path = Path("loto_stats_exports/top_25_numeros_equilibres_loto.csv")
            self.max_numeros = 49
            self.taille_grille = taille_grille or 5
            self.min_grille = 6  # Pour Loto, on peut faire des grilles de 6-10 num√©ros
            self.max_grille = 10
        elif self.jeu == 'keno':
            self.csv_path = Path("keno_stats_exports/top_30_numeros_equilibres_keno.csv")
            self.max_numeros = 70
            self.taille_grille = taille_grille or 10
            self.min_grille = 6  # Pour Keno, on peut faire des grilles de 6-10 num√©ros
            self.max_grille = 10
        else:
            raise ValueError("Le jeu doit √™tre 'loto' ou 'keno'")
        
        self.top_numeros = []
        self.scores = {}
        
        # V√©rifier les d√©pendances
        if not PANDAS_AVAILABLE:
            raise ImportError("Pandas requis pour cette fonctionnalit√©. Installez avec : pip install pandas")
        
        if not PULP_AVAILABLE:
            print("‚ö†Ô∏è  PuLP non disponible. Utilisation de l'algorithme de base sans optimisation avanc√©e.")
    
    def charger_top_numeros(self, nombre_numeros: int = None) -> bool:
        """
        Charge les num√©ros TOP depuis le fichier CSV
        
        Args:
            nombre_numeros: Nombre de num√©ros √† utiliser (d√©faut: 15 pour Loto, 20 pour Keno)
        """
        if not self.csv_path.exists():
            print(f"‚ùå Fichier TOP non trouv√© : {self.csv_path}")
            print(f"üí° G√©n√©rez d'abord les TOP avec l'option {28 if self.jeu == 'loto' else 29} du menu CLI")
            return False
        
        try:
            df = pd.read_csv(self.csv_path, sep=';')
            
            # D√©finir le nombre de num√©ros par d√©faut
            if nombre_numeros is None:
                nombre_numeros = 15 if self.jeu == 'loto' else 20
            
            # Limiter selon la taille disponible
            nombre_numeros = min(nombre_numeros, len(df))
            
            # Extraire les TOP num√©ros
            top_df = df.head(nombre_numeros)
            self.top_numeros = top_df['numero'].tolist()
            
            # Extraire les scores pour pond√©ration
            self.scores = dict(zip(top_df['numero'], top_df['score_composite']))
            
            print(f"‚úÖ {len(self.top_numeros)} num√©ros TOP {self.jeu.upper()} charg√©s")
            print(f"   Num√©ros : {self.top_numeros}")
            print(f"   Score max : {max(self.scores.values()):.3f}")
            print(f"   Score min : {min(self.scores.values()):.3f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement : {e}")
            return False
    
    def generer_grilles_optimisees_pulp(self, nb_grilles: int, taille_grille: int = None) -> List[List[int]]:
        """
        G√©n√®re des grilles optimis√©es avec PuLP
        
        Args:
            nb_grilles: Nombre de grilles √† g√©n√©rer
            taille_grille: Taille des grilles (d√©faut: celle d√©finie √† l'init)
        """
        if not PULP_AVAILABLE:
            print("‚ö†Ô∏è  PuLP non disponible, utilisation de la m√©thode alternative")
            return self.generer_grilles_optimisees_alternative(nb_grilles, taille_grille)
        
        if not self.top_numeros:
            raise ValueError("Chargez d'abord les num√©ros TOP avec charger_top_numeros()")
        
        taille = taille_grille or self.taille_grille
        
        print(f"\nüîÑ G√©n√©ration de {nb_grilles} grilles optimis√©es avec PuLP...")
        print(f"   Pool de num√©ros : {len(self.top_numeros)}")
        print(f"   Taille par grille : {taille}")
        
        # Cr√©er le probl√®me d'optimisation
        prob = pulp.LpProblem("SystemeReduitOptimal", pulp.LpMinimize)
        
        # Variables binaires : x[i][j] = 1 si le num√©ro j est dans la grille i
        numeros = self.top_numeros
        grilles_vars = {}
        
        for i in range(nb_grilles):
            grilles_vars[i] = {}
            for j in numeros:
                grilles_vars[i][j] = pulp.LpVariable(f"grille_{i}_numero_{j}", cat='Binary')
        
        # Contrainte 1: Chaque grille doit avoir exactement 'taille' num√©ros
        for i in range(nb_grilles):
            prob += pulp.lpSum([grilles_vars[i][j] for j in numeros]) == taille
        
        # Objectif: Maximiser la couverture pond√©r√©e (minimiser le n√©gatif)
        # Chaque num√©ro contribue selon son score
        couverture_ponderee = pulp.lpSum([
            self.scores[j] * grilles_vars[i][j] 
            for i in range(nb_grilles) 
            for j in numeros
        ])
        
        prob += -couverture_ponderee  # Minimiser le n√©gatif = maximiser
        
        # Contrainte 2: √âquilibrage - √©viter de sur-utiliser certains num√©ros
        for j in numeros:
            utilisation = pulp.lpSum([grilles_vars[i][j] for i in range(nb_grilles)])
            # Un num√©ro ne peut √™tre utilis√© dans plus de nb_grilles/2 grilles
            prob += utilisation <= max(1, nb_grilles // 2)
        
        # R√©soudre
        print("   üßÆ R√©solution du probl√®me d'optimisation...")
        prob.solve(pulp.PULP_CBC_CMD(msg=0))
        
        # Extraire les r√©sultats
        grilles = []
        if prob.status == pulp.LpStatusOptimal:
            for i in range(nb_grilles):
                grille = []
                for j in numeros:
                    if grilles_vars[i][j].varValue == 1:
                        grille.append(j)
                grilles.append(sorted(grille))
            
            print(f"   ‚úÖ Optimisation r√©ussie ! {len(grilles)} grilles g√©n√©r√©es")
        else:
            print(f"   ‚ö†Ô∏è  Optimisation √©chou√©e (statut: {prob.status})")
            return self.generer_grilles_optimisees_alternative(nb_grilles, taille_grille)
        
        return grilles
    
    def generer_grilles_optimisees_alternative(self, nb_grilles: int, taille_grille: int = None) -> List[List[int]]:
        """
        M√©thode alternative d'optimisation sans PuLP
        Utilise un algorithme glouton avec pond√©ration par scores
        """
        if not self.top_numeros:
            raise ValueError("Chargez d'abord les num√©ros TOP avec charger_top_numeros()")
        
        taille = taille_grille or self.taille_grille
        
        print(f"\nüîÑ G√©n√©ration de {nb_grilles} grilles avec algorithme glouton pond√©r√©...")
        
        grilles = []
        utilisation_numeros = {num: 0 for num in self.top_numeros}
        
        for i in range(nb_grilles):
            # Cr√©er une grille en privil√©giant les num√©ros les mieux not√©s et moins utilis√©s
            grille = []
            numeros_disponibles = self.top_numeros.copy()
            
            for _ in range(taille):
                if not numeros_disponibles:
                    break
                
                # Calculer un score combin√© : score original - p√©nalit√© d'utilisation
                scores_ajustes = {}
                for num in numeros_disponibles:
                    score_base = self.scores[num]
                    penalite = utilisation_numeros[num] * 0.1  # P√©nalit√© progressive
                    scores_ajustes[num] = score_base - penalite
                
                # S√©lectionner le meilleur num√©ro
                meilleur_num = max(scores_ajustes, key=scores_ajustes.get)
                grille.append(meilleur_num)
                numeros_disponibles.remove(meilleur_num)
                utilisation_numeros[meilleur_num] += 1
            
            grilles.append(sorted(grille))
        
        print(f"   ‚úÖ {len(grilles)} grilles g√©n√©r√©es avec m√©thode alternative")
        return grilles
    
    def analyser_couverture_optimisee(self, grilles: List[List[int]]) -> Dict[str, Any]:
        """
        Analyse la couverture des grilles optimis√©es
        """
        if not grilles:
            return {}
        
        # Statistiques de base
        total_numeros_utilises = set()
        for grille in grilles:
            total_numeros_utilises.update(grille)
        
        # Calcul des scores moyens
        scores_moyens = []
        for grille in grilles:
            score_grille = sum(self.scores.get(num, 0) for num in grille) / len(grille)
            scores_moyens.append(score_grille)
        
        # √âquilibrage de l'utilisation
        utilisation = {}
        for grille in grilles:
            for num in grille:
                utilisation[num] = utilisation.get(num, 0) + 1
        
        return {
            'nb_grilles': len(grilles),
            'taille_moyenne_grille': sum(len(g) for g in grilles) / len(grilles),
            'numeros_uniques_utilises': len(total_numeros_utilises),
            'couverture_pool': len(total_numeros_utilises) / len(self.top_numeros) * 100,
            'score_moyen_global': sum(scores_moyens) / len(scores_moyens),
            'score_max_grille': max(scores_moyens),
            'score_min_grille': min(scores_moyens),
            'utilisation_max': max(utilisation.values()) if utilisation else 0,
            'utilisation_min': min(utilisation.values()) if utilisation else 0,
            'equilibrage_score': 100 - (max(utilisation.values()) - min(utilisation.values())) * 10 if utilisation else 0
        }


class GenerateurGrilles:
    """Classe principale pour la g√©n√©ration de grilles Loto/Keno avec syst√®mes r√©duits"""
    
    def __init__(self, jeu: str = 'auto'):
        self.base_path = Path(__file__).parent
        self.output_path = self.base_path / "sorties"
        self.output_path.mkdir(exist_ok=True)
        
        # Configuration selon le type de jeu
        if jeu.lower() == 'keno':
            self._configurer_keno()
        elif jeu.lower() == 'loto':
            self._configurer_loto()
        else:
            # Mode auto - sera configur√© lors de l'analyse des num√©ros
            self.jeu = 'auto'
            self.min_numero = 1
            self.max_numero = 70  # Plage la plus large
            self.taille_grille = 5   # Par d√©faut Loto
            self.nom_jeu = "Auto"
    
    def _configurer_loto(self):
        """Configure pour le jeu Loto"""
        self.jeu = 'loto'
        self.min_numero = 1
        self.max_numero = 49
        self.taille_grille = 5
        self.nom_jeu = "Loto"
    
    def _configurer_keno(self):
        """Configure pour le jeu Keno"""
        self.jeu = 'keno'
        self.min_numero = 1
        self.max_numero = 70
        self.taille_grille = 10
        self.nom_jeu = "Keno"
    
    def detecter_jeu_automatique(self, nombres: List[int]) -> str:
        """
        D√©tecte automatiquement le type de jeu selon les num√©ros
        
        Logique :
        - Si tous les num√©ros sont ‚â§ 49 ‚Üí Loto
        - Si au moins un num√©ro est > 49 ‚Üí Keno
        """
        max_numero = max(nombres) if nombres else 1
        
        if max_numero > 49:
            jeu_detecte = 'keno'
            print(f"üîç D√©tection automatique : **KENO** (num√©ro max: {max_numero})")
        else:
            jeu_detecte = 'loto'
            print(f"üîç D√©tection automatique : **LOTO** (num√©ros ‚â§ 49)")
        
        return jeu_detecte
    
    def charger_nombres_depuis_fichier(self, fichier: str) -> List[int]:
        """Charge une liste de num√©ros depuis un fichier"""
        
        fichier_path = Path(fichier)
        if not fichier_path.exists():
            raise FileNotFoundError(f"Fichier non trouv√© : {fichier}")
        
        nombres = []
        
        try:
            with open(fichier_path, 'r', encoding='utf-8') as f:
                contenu = f.read()
                
                # Supporte plusieurs formats
                for ligne in contenu.split('\n'):
                    ligne = ligne.strip()
                    if not ligne or ligne.startswith('#'):
                        continue
                    
                    # S√©parateurs possibles : virgule, espace, point-virgule
                    for sep in [',', ' ', ';', '\t']:
                        if sep in ligne:
                            nombres.extend([int(x.strip()) for x in ligne.split(sep) if x.strip().isdigit()])
                            break
                    else:
                        # Ligne avec un seul num√©ro
                        if ligne.isdigit():
                            nombres.append(int(ligne))
            
        except Exception as e:
            raise ValueError(f"Erreur lors de la lecture du fichier : {e}")
        
        return list(set(nombres))  # Supprime les doublons
    
    def valider_nombres(self, nombres: List[int]) -> List[int]:
        """Valide et filtre la liste de num√©ros"""
        
        # Filtre les num√©ros valides selon le jeu
        nombres_valides = [n for n in nombres if self.min_numero <= n <= self.max_numero]
        
        min_requis = self.taille_grille  # Au minimum la taille de grille
        if len(nombres_valides) < min_requis:
            raise ValueError(f"Au moins {min_requis} num√©ros valides requis ({self.min_numero}-{self.max_numero}) pour des grilles de {self.taille_grille} num√©ros ({self.nom_jeu}). Trouv√©s : {len(nombres_valides)}")
        
        if len(nombres_valides) > 20:
            print(f"‚ö†Ô∏è  Trop de num√©ros ({len(nombres_valides)}), limitation √† 20")
            nombres_valides = nombres_valides[:20]
        
        return sorted(list(set(nombres_valides)))
    
    def exporter_grilles(self, grilles: List[List[int]], analyse: Dict, 
                        format_export: str = 'csv', nom_fichier: str = None) -> str:
        """Exporte les grilles dans le format sp√©cifi√©"""
        
        if nom_fichier is None:
            nom_fichier = "grilles_systeme_reduit"
        
        if format_export.lower() == 'csv':
            return self._exporter_csv(grilles, analyse, nom_fichier)
        elif format_export.lower() == 'json':
            return self._exporter_json(grilles, analyse, nom_fichier)
        elif format_export.lower() == 'txt':
            return self._exporter_txt(grilles, analyse, nom_fichier)
        elif format_export.lower() == 'md' or format_export.lower() == 'markdown':
            return self._exporter_markdown(grilles, analyse, nom_fichier)
        else:
            raise ValueError(f"Format non support√© : {format_export}")
    
    def _exporter_csv(self, grilles: List[List[int]], analyse: Dict, nom_fichier: str) -> str:
        """Exporte au format CSV"""
        
        fichier_path = self.output_path / f"{nom_fichier}.csv"
        
        with open(fichier_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            # En-t√™tes adapt√©s au nombre de num√©ros
            en_tetes = ['Grille'] + [f'Numero_{i}' for i in range(1, self.taille_grille + 1)]
            writer.writerow(en_tetes)
            
            # Grilles
            for i, grille in enumerate(grilles, 1):
                writer.writerow([f"Grille_{i:03d}"] + grille)
            
            # Ligne vide puis statistiques
            writer.writerow([])
            writer.writerow(['=== ANALYSE ==='])
            writer.writerow(['Indicateur', 'Valeur'])
            writer.writerow(['Nombre de grilles', analyse['nb_grilles']])
            
            # Analyse diff√©rente selon le mode
            if 'grilles_uniques' in analyse:
                # Mode classique
                writer.writerow(['Grilles uniques', analyse['grilles_uniques']])
                writer.writerow(['% Unicit√©', f"{analyse['pourcentage_unique']:.1f}%"])
                writer.writerow(['Score qualit√©', f"{analyse['score_qualite']:.1f}/100"])
                writer.writerow(['Recommandation', analyse['recommandation']])
            else:
                # Mode TOP CSV optimis√©
                writer.writerow(['Num√©ros uniques utilis√©s', analyse['numeros_uniques_utilises']])
                writer.writerow(['Couverture du pool TOP', f"{analyse['couverture_pool']:.1f}%"])
                writer.writerow(['Score moyen', f"{analyse['score_moyen_global']:.3f}"])
                writer.writerow(['Score max', f"{analyse['score_max_grille']:.3f}"])
                writer.writerow(['Score min', f"{analyse['score_min_grille']:.3f}"])
                writer.writerow(['√âquilibrage', f"{analyse['equilibrage_score']:.1f}/100"])
        
        return str(fichier_path)
    
    def _exporter_json(self, grilles: List[List[int]], analyse: Dict, nom_fichier: str) -> str:
        """Exporte au format JSON"""
        
        fichier_path = self.output_path / f"{nom_fichier}.json"
        
        data = {
            'metadata': {
                'date_generation': datetime.now().isoformat(),
                'type': 'systeme_reduit',
                'version': '1.0'
            },
            'grilles': [
                {
                    'id': i + 1,
                    'numeros': grille
                }
                for i, grille in enumerate(grilles)
            ],
            'analyse': analyse
        }
        
        with open(fichier_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        return str(fichier_path)
    
    def _exporter_txt(self, grilles: List[List[int]], analyse: Dict, nom_fichier: str) -> str:
        """Exporte au format texte lisible"""
        
        fichier_path = self.output_path / f"{nom_fichier}.txt"
        
        with open(fichier_path, 'w', encoding='utf-8') as f:
            f.write("üéØ GRILLES LOTO - SYST√àME R√âDUIT\n")
            f.write("=" * 50 + "\n\n")
            
            f.write(f"üìÖ Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"üé≤ Nombre de grilles : {len(grilles)}\n")
            
            # Informations diff√©rentes selon le mode
            if 'score_qualite' in analyse:
                # Mode classique
                f.write(f"‚≠ê Score de qualit√© : {analyse['score_qualite']:.1f}/100\n")
                f.write(f"üí° Recommandation : {analyse['recommandation']}\n\n")
            else:
                # Mode TOP CSV optimis√©
                f.write(f"üéØ Num√©ros uniques utilis√©s : {analyse['numeros_uniques_utilises']}\n")
                f.write(f"ÔøΩ Score moyen : {analyse['score_moyen_global']:.3f}\n")
                f.write(f"‚öñÔ∏è √âquilibrage : {analyse['equilibrage_score']:.1f}/100\n\n")
            
            f.write("ÔøΩüìã GRILLES G√âN√âR√âES\n")
            f.write("-" * 30 + "\n\n")
            
            for i, grille in enumerate(grilles, 1):
                f.write(f"Grille {i:3d} : {' - '.join(f'{n:2d}' for n in grille)}\n")
            
            f.write("\n" + "=" * 50 + "\n")
            f.write("üìä ANALYSE D√âTAILL√âE\n")
            f.write("=" * 50 + "\n\n")
            
            # Analyse diff√©rente selon le mode
            if 'grilles_uniques' in analyse:
                # Mode classique
                f.write(f"Grilles uniques : {analyse['grilles_uniques']}/{analyse['nb_grilles']} ")
                f.write(f"({analyse['pourcentage_unique']:.1f}%)\n\n")
                
                if 'plus_utilises' in analyse:
                    f.write("üî• Num√©ros les plus utilis√©s :\n")
                    for num, count in analyse['plus_utilises']:
                        f.write(f"   {num:2d} : {count} fois\n")
                    f.write("\n")
                
                if 'couverture' in analyse:
                    couv = analyse['couverture']
                    f.write("üìà Couverture th√©orique :\n")
                    f.write(f"   Combinaisons couvertes : {couv['couverture_combinaisons']:.1f}%\n")
                    f.write(f"   Probabilit√© garantie : {couv['probabilite_garantie']:.1f}%\n")
                    f.write(f"   Efficacit√© : {couv['efficacite']:.1f}%\n")
            else:
                # Mode TOP CSV optimis√©
                f.write(f"Num√©ros uniques utilis√©s : {analyse['numeros_uniques_utilises']}\n")
                f.write(f"Couverture du pool TOP : {analyse['couverture_pool']:.1f}%\n")
                f.write(f"Score moyen global : {analyse['score_moyen_global']:.3f}\n")
                f.write(f"Score maximum : {analyse['score_max_grille']:.3f}\n")
                f.write(f"Score minimum : {analyse['score_min_grille']:.3f}\n")
                f.write(f"√âquilibrage : {analyse['equilibrage_score']:.1f}/100\n")
        
        return str(fichier_path)
    
    def _exporter_markdown(self, grilles: List[List[int]], analyse: Dict, nom_fichier: str) -> str:
        """Exporte au format Markdown"""
        
        fichier_path = self.output_path / f"{nom_fichier}.md"
        
        with open(fichier_path, 'w', encoding='utf-8') as f:
            f.write(f"# üéØ Grilles {self.nom_jeu} - Syst√®me R√©duit\n\n")
            
            f.write("## üìä Informations G√©n√©rales\n\n")
            f.write(f"- **üìÖ Date de g√©n√©ration :** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"- **üé≤ Nombre de grilles :** {len(grilles)}\n")
            
            # Informations diff√©rentes selon le mode
            if 'score_qualite' in analyse:
                # Mode classique
                f.write(f"- **‚≠ê Score de qualit√© :** {analyse['score_qualite']:.1f}/100\n")
                f.write(f"- **üí° Recommandation :** {analyse['recommandation']}\n\n")
            else:
                # Mode TOP CSV optimis√©
                f.write(f"- **üéØ Num√©ros uniques utilis√©s :** {analyse['numeros_uniques_utilises']}\n")
                f.write(f"- **üìà Score moyen :** {analyse['score_moyen_global']:.3f}\n")
                f.write(f"- **‚öñÔ∏è √âquilibrage :** {analyse['equilibrage_score']:.1f}/100\n\n")
            
            f.write("## üé≤ Grilles G√©n√©r√©es\n\n")
            
            # En-t√™te du tableau adapt√© au nombre de num√©ros
            if self.taille_grille <= 5:
                f.write("| Grille | Num√©ro 1 | Num√©ro 2 | Num√©ro 3 | Num√©ro 4 | Num√©ro 5 |\n")
                f.write("|--------|----------|----------|----------|----------|----------|\n")
            elif self.taille_grille <= 10:
                headers = "| Grille |" + "".join([f" N¬∞{i} |" for i in range(1, self.taille_grille + 1)]) + "\n"
                separator = "|--------|" + "-----|" * self.taille_grille + "\n"
                f.write(headers)
                f.write(separator)
            else:
                # Pour plus de 10 num√©ros, format compact
                headers = "| Grille |" + "".join([f" {i} |" for i in range(1, self.taille_grille + 1)]) + "\n"
                separator = "|--------|" + "---|" * self.taille_grille + "\n"
                f.write(headers)
                f.write(separator)
            
            for i, grille in enumerate(grilles, 1):
                numeros = " | ".join(f"**{n:02d}**" for n in grille)
                f.write(f"| {i:03d} | {numeros} |\n")
            
            f.write("\n## üìà Analyse D√©taill√©e\n\n")
            
            # Analyse diff√©rente selon le mode
            if 'grilles_uniques' in analyse:
                # Mode classique
                f.write("### ‚úÖ Statistiques de Base\n\n")
                f.write(f"- **Grilles uniques :** {analyse['grilles_uniques']}/{analyse['nb_grilles']} ")
                f.write(f"({analyse['pourcentage_unique']:.1f}%)\n")
                f.write(f"- **Score de qualit√© :** {analyse['score_qualite']:.1f}/100\n")
                f.write(f"- **Recommandation :** {analyse['recommandation']}\n\n")
                
                if 'plus_utilises' in analyse:
                    f.write("### üî• Num√©ros les Plus Utilis√©s\n\n")
                    f.write("| Num√©ro | Occurrences |\n")
                    f.write("|--------|-------------|\n")
                    for num, count in analyse['plus_utilises']:
                        f.write(f"| **{num:02d}** | {count} fois |\n")
                    f.write("\n")
                
                if 'moins_utilises' in analyse and analyse['moins_utilises']:
                    f.write("### ‚ùÑÔ∏è Num√©ros les Moins Utilis√©s\n\n")
                    f.write("| Num√©ro | Occurrences |\n")
                    f.write("|--------|-------------|\n")
                    for num, count in analyse['moins_utilises']:
                        f.write(f"| **{num:02d}** | {count} fois |\n")
                    f.write("\n")
                
                if 'couverture' in analyse:
                    couv = analyse['couverture']
                    f.write("### üéØ Couverture Th√©orique\n\n")
                    f.write("| Indicateur | Valeur |\n")
                    f.write("|------------|--------|\n")
                    f.write(f"| **Combinaisons couvertes** | {couv['couverture_combinaisons']:.1f}% |\n")
                    f.write(f"| **Probabilit√© garantie** | {couv['probabilite_garantie']:.1f}% |\n")
                    f.write(f"| **Efficacit√© du syst√®me** | {couv['efficacite']:.1f}% |\n")
                    f.write(f"| **Combinaisons th√©oriques** | {couv['total_combinaisons_theoriques']:,} |\n")
            else:
                # Mode TOP CSV optimis√©
                f.write("### üéØ Statistiques d'Optimisation\n\n")
                f.write(f"- **Num√©ros uniques utilis√©s :** {analyse['numeros_uniques_utilises']}\n")
                f.write(f"- **Couverture du pool TOP :** {analyse['couverture_pool']:.1f}%\n")
                f.write(f"- **Score moyen global :** {analyse['score_moyen_global']:.3f}\n")
                f.write(f"- **Score maximum :** {analyse['score_max_grille']:.3f}\n")
                f.write(f"- **Score minimum :** {analyse['score_min_grille']:.3f}\n")
                f.write(f"- **√âquilibrage :** {analyse['equilibrage_score']:.1f}/100\n\n")
                f.write("\n")
            
            f.write("## üéÆ Comment Utiliser Ces Grilles\n\n")
            f.write("1. **Imprimer ou sauvegarder** ce fichier pour r√©f√©rence\n")
            f.write("2. **Jouer les grilles** selon votre budget (toutes ou une s√©lection)\n")
            f.write("3. **Suivre les r√©sultats** pour √©valuer la performance du syst√®me\n\n")
            
            f.write("## üí° Conseils\n\n")
            
            # Conseils diff√©rents selon le mode
            if 'score_qualite' in analyse:
                # Mode classique
                if analyse['score_qualite'] >= 80:
                    f.write("‚úÖ **Syst√®me de haute qualit√©** - Excellent choix de num√©ros et r√©partition optimale\n\n")
                elif analyse['score_qualite'] >= 60:
                    f.write("üü° **Syst√®me de bonne qualit√©** - Quelques am√©liorations possibles\n\n")
                else:
                    f.write("üî¥ **Syst√®me √† optimiser** - Consid√©rez augmenter le nombre de num√©ros favoris\n\n")
            else:
                # Mode TOP CSV optimis√©
                if analyse['equilibrage_score'] >= 90:
                    f.write("‚úÖ **Optimisation excellente** - Grilles parfaitement √©quilibr√©es avec TOP num√©ros\n\n")
                elif analyse['equilibrage_score'] >= 70:
                    f.write("üü° **Bonne optimisation** - Grilles bien √©quilibr√©es avec les meilleurs num√©ros\n\n")
                else:
                    f.write("üî¥ **Optimisation basique** - Grilles correctes mais √©quilibrage √† am√©liorer\n\n")
            
            f.write("- üéØ Les syst√®mes r√©duits ne garantissent pas de gains mais optimisent vos chances\n")
            f.write("- üìä La garantie ne s'applique que si vos favoris contiennent les 5 bons num√©ros\n")
            f.write("- üí∞ Adaptez le nombre de grilles √† votre budget\n\n")
            
            f.write("---\n\n")
            f.write(f"*G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')} par le G√©n√©rateur de Syst√®mes R√©duits*\n")
        
        return str(fichier_path)
    
    def generer(self, nombres: List[int], nb_grilles: int, garantie: int = 3, 
               methode: str = 'optimal', nb_nombres_utilises: int = None,
               nombres_par_grille: int = None, export: bool = False, format_export: str = 'csv') -> Dict[str, Any]:
        """
        G√©n√®re des grilles selon les param√®tres sp√©cifi√©s
        
        Args:
            nombres: Liste des num√©ros favoris
            nb_grilles: Nombre de grilles √† g√©n√©rer
            garantie: Niveau de garantie (2-5)
            methode: 'optimal' ou 'aleatoire'
            nb_nombres_utilises: Nombre de num√©ros √† utiliser parmi les favoris (None = tous)
            nombres_par_grille: Nombre de num√©ros par grille (None = automatique selon le jeu)
            export: Exporter les r√©sultats
            format_export: Format d'export ('csv', 'json', 'txt', 'md')
        
        Returns:
            Dictionnaire avec les grilles et l'analyse
        """
        
        # D√©tection automatique du jeu si n√©cessaire
        if self.jeu == 'auto':
            jeu_detecte = self.detecter_jeu_automatique(nombres)
            if jeu_detecte == 'keno':
                self._configurer_keno()
            else:
                self._configurer_loto()
        
        # Gestion du param√®tre nombres_par_grille
        if nombres_par_grille is not None:
            min_par_grille = 3 if self.jeu == 'keno' else 5
            max_par_grille = 20 if self.jeu == 'keno' else 10
            
            if nombres_par_grille < min_par_grille:
                print(f"‚ö†Ô∏è  Minimum {min_par_grille} num√©ros par grille pour {self.nom_jeu}. Ajustement automatique.")
                nombres_par_grille = min_par_grille
            elif nombres_par_grille > max_par_grille:
                print(f"‚ö†Ô∏è  Maximum {max_par_grille} num√©ros par grille pour {self.nom_jeu}. Ajustement automatique.")
                nombres_par_grille = max_par_grille
            
            # Mise √† jour de la taille de grille
            self.taille_grille = nombres_par_grille
            print(f"üéØ Taille de grille personnalis√©e : {self.taille_grille} num√©ros par grille")
        
        # Application des minimums selon le jeu
        min_grilles = 3 if self.jeu == 'keno' else 5
        if nb_grilles < min_grilles:
            print(f"‚ö†Ô∏è  Minimum {min_grilles} grilles requis pour {self.nom_jeu}. Ajustement automatique.")
            nb_grilles = min_grilles
        
        print(f"\nüéØ G√âN√âRATEUR DE GRILLES {self.nom_jeu.upper()} - SYST√àME R√âDUIT")
        print("=" * 60)
        
        # Validation des param√®tres
        nombres_valides = self.valider_nombres(nombres)
        print(f"üìä Num√©ros favoris valid√©s : {nombres_valides}")
        
        # V√©rification si on a assez de num√©ros pour g√©n√©rer le nombre de grilles demand√©
        import itertools
        combinaisons_possibles = len(list(itertools.combinations(nombres_valides, self.taille_grille)))
        
        if combinaisons_possibles < nb_grilles:
            print(f"‚ö†Ô∏è  Seulement {combinaisons_possibles} combinaisons possibles avec {len(nombres_valides)} num√©ros.")
            print(f"üí° Pour obtenir {nb_grilles} grilles {self.nom_jeu}, ajoutez plus de num√©ros favoris.")
            print(f"üìä Minimum recommand√© : {self.taille_grille + (nb_grilles - 1)} num√©ros")
            
            # On continue quand m√™me avec ce qu'on a
            if combinaisons_possibles == 0:
                raise ValueError(f"Impossible de g√©n√©rer des grilles avec {len(nombres_valides)} num√©ros pour {self.nom_jeu}")
        
        # S√©lection du nombre de num√©ros √† utiliser
        if nb_nombres_utilises is not None:
            # Le minimum requis doit √™tre adapt√© √† la taille de grille actuelle
            min_requis = self.taille_grille  # Au minimum la taille de grille
            if nb_nombres_utilises < min_requis:
                raise ValueError(f"Au moins {min_requis} num√©ros sont requis pour g√©n√©rer des grilles de {self.taille_grille} num√©ros ({self.nom_jeu})")
            if nb_nombres_utilises > len(nombres_valides):
                raise ValueError(f"Impossible d'utiliser {nb_nombres_utilises} num√©ros parmi {len(nombres_valides)} disponibles")
            
            # S√©lection des meilleurs num√©ros (on peut ajouter de la logique ici)
            import random
            random.seed(42)  # Pour la reproductibilit√©
            nombres_selectionnes = sorted(random.sample(nombres_valides, nb_nombres_utilises))
            print(f"üéØ Utilisation de {nb_nombres_utilises} num√©ros parmi {len(nombres_valides)} : {nombres_selectionnes}")
            nombres_valides = nombres_selectionnes
        
        # Cr√©ation du syst√®me r√©duit
        systeme = SystemeReduit(nombres_valides, garantie, self.taille_grille)
        
        # G√©n√©ration des grilles
        if methode.lower() == 'optimal':
            # V√©rifier si on a assez de combinaisons pour la m√©thode optimale
            combinaisons_possibles = math.comb(len(nombres_valides), self.taille_grille)
            if combinaisons_possibles < nb_grilles:
                print(f"‚ö†Ô∏è  Basculement automatique vers la m√©thode al√©atoire")
                print(f"   Raison: {combinaisons_possibles} combinaisons < {nb_grilles} grilles demand√©es")
                
                # Sugg√©rer une taille de grille plus petite si possible
                if self.jeu == 'keno' and self.taille_grille > 5:
                    for taille_test in range(self.taille_grille - 1, 4, -1):
                        combinaisons_test = math.comb(len(nombres_valides), taille_test)
                        if combinaisons_test >= nb_grilles:
                            print(f"üí° Conseil: Utilisez --nombres-par-grille {taille_test} pour {combinaisons_test} combinaisons possibles")
                            break
                
                grilles = systeme.generer_grilles_aleatoires_intelligentes(nb_grilles)
            else:
                grilles = systeme.generer_grilles_optimales(nb_grilles)
        else:
            grilles = systeme.generer_grilles_aleatoires_intelligentes(nb_grilles)
        
        # Analyse des r√©sultats
        analyse = systeme.analyser_grilles(grilles)
        
        # Affichage des r√©sultats
        self._afficher_resultats(grilles, analyse)
        
        # Export si demand√©
        fichier_export = None
        if export:
            try:
                fichier_export = self.exporter_grilles(grilles, analyse, format_export)
                print(f"\nüíæ Grilles export√©es : {fichier_export}")
            except Exception as e:
                print(f"\n‚ùå Erreur lors de l'export : {e}")
        
        return {
            'grilles': grilles,
            'analyse': analyse,
            'fichier_export': fichier_export,
            'systeme_info': {
                'nombres_favoris': nombres_valides,
                'garantie': garantie,
                'methode': methode
            }
        }
    
    def _afficher_resultats(self, grilles: List[List[int]], analyse: Dict):
        """Affiche les r√©sultats de g√©n√©ration"""
        
        print(f"\nüé≤ GRILLES G√âN√âR√âES")
        print("=" * 40)
        
        for i, grille in enumerate(grilles[:10], 1):  # Affiche les 10 premi√®res
            print(f"Grille {i:2d} : {' - '.join(f'{n:2d}' for n in grille)}")
        
        if len(grilles) > 10:
            print(f"... et {len(grilles) - 10} autres grilles")
        
        print(f"\nüìä ANALYSE")
        print("=" * 30)
        print(f"Nombre total de grilles : {analyse['nb_grilles']}")
        print(f"Grilles uniques : {analyse['grilles_uniques']}")
        print(f"Pourcentage d'unicit√© : {analyse['pourcentage_unique']:.1f}%")
        print(f"Score de qualit√© : {analyse['score_qualite']:.1f}/100")
        print(f"Recommandation : {analyse['recommandation']}")
        
        if 'couverture' in analyse:
            print(f"\nüéØ COUVERTURE TH√âORIQUE")
            print("=" * 35)
            couv = analyse['couverture']
            print(f"Couverture combinaisons : {couv['couverture_combinaisons']:.1f}%")
            print(f"Probabilit√© garantie : {couv['probabilite_garantie']:.1f}%")
            print(f"Efficacit√© du syst√®me : {couv['efficacite']:.1f}%")


def main():
    """Fonction principale avec interface en ligne de commande"""
    
    parser = argparse.ArgumentParser(
        description="G√©n√©rateur de grilles Loto avec syst√®mes r√©duits",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation :

  # G√©n√©ration basique avec num√©ros en param√®tre
  python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 5

  # Avec niveau de garantie personnalis√©
  python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 10 --garantie 3

  # Utiliser seulement 8 num√©ros parmi les 10 favoris
  python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 5 --nombres-utilises 8

  # Mode Keno (1-70, grilles de 10 num√©ros)
  python generateur_grilles.py --jeu keno --nombres 5,15,25,35,45,55,65 --grilles 3

  # Lecture depuis un fichier
  python generateur_grilles.py --fichier mes_nombres.txt --grilles 8

  # Export en JSON
  python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 5 --export --format json

  # M√©thode al√©atoire intelligente
  python generateur_grilles.py --nombres 1,7,12,18,23,29,34,39,45,49 --grilles 15 --methode aleatoire

  # NOUVEAUX : Utilisation des CSV TOP avec optimisation
  
  # Loto avec TOP 25 (5 num√©ros par grille, optimisation PuLP)
  python generateur_grilles.py --top-csv --jeu loto --grilles 5 --export

  # Keno avec TOP 30 (8 num√©ros par grille, algorithme glouton)
  python generateur_grilles.py --top-csv --jeu keno --grilles 10 --taille-grille-keno 8 --optimisation glouton

  # Loto avec TOP 15 num√©ros et grilles de 6 num√©ros
  python generateur_grilles.py --top-csv --jeu loto --grilles 8 --top-nombres 15 --taille-grille-loto 6

  # Mode automatique avec m√©thode top-optimise
  python generateur_grilles.py --methode top-optimise --grilles 12 --export --format json
        """
    )
    
    # Arguments principaux (optionnel si --top-csv est utilis√©)
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--nombres',
        type=str,
        help='Liste des num√©ros favoris s√©par√©s par des virgules (ex: 1,7,12,18,23)'
    )
    group.add_argument(
        '--fichier',
        type=str,
        help='Fichier contenant les num√©ros favoris (un par ligne ou s√©par√©s)'
    )
    
    parser.add_argument(
        '--grilles',
        type=int,
        required=True,
        help='Nombre de grilles √† g√©n√©rer'
    )
    
    parser.add_argument(
        '--nombres-utilises',
        type=int,
        help='Nombre de num√©ros √† utiliser parmi les favoris (d√©faut: tous)'
    )
    
    parser.add_argument(
        '--nombres-par-grille',
        type=int,
        help='Nombre de num√©ros par grille (Loto: min 5, Keno: min 3, d√©faut: automatique selon le jeu)'
    )
    
    parser.add_argument(
        '--jeu',
        choices=['auto', 'loto', 'keno'],
        default='auto',
        help='Type de jeu (auto: d√©tection automatique, loto: 1-49/5 num√©ros, keno: 1-70/10 num√©ros, d√©faut: auto)'
    )
    
    parser.add_argument(
        '--garantie',
        type=int,
        choices=[2, 3, 4, 5],
        default=3,
        help='Niveau de garantie (d√©faut: 3)'
    )
    
    parser.add_argument(
        '--methode',
        choices=['optimal', 'aleatoire', 'top-optimise'],
        default='optimal',
        help='M√©thode de g√©n√©ration (d√©faut: optimal, top-optimise: utilise les CSV TOP avec optimisation PuLP)'
    )
    
    # Nouvelles options pour les CSV TOP
    parser.add_argument(
        '--top-csv',
        action='store_true',
        help='Utiliser les fichiers CSV TOP 25 Loto / TOP 30 Keno au lieu de num√©ros manuels'
    )
    
    parser.add_argument(
        '--top-nombres',
        type=int,
        help='Nombre de num√©ros TOP √† utiliser (d√©faut: 15 pour Loto, 20 pour Keno)'
    )
    
    parser.add_argument(
        '--optimisation',
        choices=['pulp', 'glouton'],
        default='pulp',
        help='Type d\'optimisation (pulp: optimisation lin√©aire, glouton: algorithme glouton, d√©faut: pulp)'
    )
    
    parser.add_argument(
        '--taille-grille-keno',
        type=int,
        choices=range(6, 11),
        help='Taille des grilles Keno (6-10 num√©ros) quand --top-csv est utilis√©'
    )
    
    parser.add_argument(
        '--taille-grille-loto',
        type=int,
        choices=[5, 6, 7, 8, 9, 10],
        help='Taille des grilles Loto (5-10 num√©ros) quand --top-csv est utilis√©'
    )
    
    parser.add_argument(
        '--export',
        action='store_true',
        help='Exporter les grilles vers un fichier'
    )
    
    parser.add_argument(
        '--format',
        choices=['csv', 'json', 'txt', 'md', 'markdown'],
        default='csv',
        help='Format d\'export (d√©faut: csv)'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Affichage d√©taill√©'
    )
    
    args = parser.parse_args()
    
    # Validation conditionnelle
    if not args.top_csv and not args.nombres and not args.fichier:
        parser.error("L'argument --nombres ou --fichier est requis sauf si --top-csv est utilis√©")
    
    try:
        # Initialisation du g√©n√©rateur
        generateur = GenerateurGrilles(args.jeu)
        
        # Chargement des num√©ros (seulement si pas en mode TOP CSV)
        nombres = None
        if not args.top_csv:
            if args.nombres:
                try:
                    nombres = [int(x.strip()) for x in args.nombres.split(',')]
                except ValueError:
                    print("‚ùå Erreur : Format des num√©ros invalide. Utilisez: 1,2,3,4,5")
                    sys.exit(1)
            else:
                nombres = generateur.charger_nombres_depuis_fichier(args.fichier)
        
        # Validation des param√®tres
        if args.grilles <= 0:
            print("‚ùå Erreur : Le nombre de grilles doit √™tre positif")
            sys.exit(1)
        
        if args.grilles > 10000:
            print("‚ùå Erreur : Maximum 10000 grilles autoris√©es")
            sys.exit(1)
        
        # Validation des nombres seulement si pas en mode TOP CSV
        if not args.top_csv and nombres:
            jeu_detecte = generateur.detecter_jeu_automatique(nombres)
            if jeu_detecte != generateur.jeu and generateur.jeu != 'auto':
                print(f"‚ö†Ô∏è  Attention : Jeu d√©tect√© ({jeu_detecte}) diff√©rent du jeu configur√© ({generateur.jeu})")
        
        # Gestion des nouvelles options TOP CSV
        if args.top_csv or args.methode == 'top-optimise':
            print("\nüéØ MODE TOP CSV OPTIMIS√â")
            print("=" * 40)
            
            # D√©terminer le jeu si auto
            jeu_final = args.jeu
            if jeu_final == 'auto':
                if args.taille_grille_loto:
                    jeu_final = 'loto'
                elif args.taille_grille_keno:
                    jeu_final = 'keno'
                else:
                    # D√©tecter selon les fichiers CSV disponibles
                    loto_csv = Path("loto_stats_exports/top_25_numeros_equilibres_loto.csv")
                    keno_csv = Path("keno_stats_exports/top_30_numeros_equilibres_keno.csv")
                    
                    if loto_csv.exists() and not keno_csv.exists():
                        jeu_final = 'loto'
                    elif keno_csv.exists() and not loto_csv.exists():
                        jeu_final = 'keno'
                    else:
                        print("üé≤ Les deux fichiers CSV sont disponibles. Choisissez explicitement --jeu loto ou --jeu keno")
                        print("1Ô∏è‚É£  Loto (TOP 25 num√©ros)")
                        print("2Ô∏è‚É£  Keno (TOP 30 num√©ros)")
                        
                        while True:
                            choix = input("Votre choix (1-2): ").strip()
                            if choix == "1":
                                jeu_final = 'loto'
                                break
                            elif choix == "2":
                                jeu_final = 'keno'
                                break
                            else:
                                print("Choix invalide. Entrez 1 ou 2.")
            
            # D√©terminer la taille de grille
            if jeu_final == 'loto':
                taille_grille = args.taille_grille_loto or 5
            elif jeu_final == 'keno':
                taille_grille = args.taille_grille_keno or 10
            
            print(f"üéÆ Jeu s√©lectionn√© : {jeu_final.upper()}")
            print(f"üî¢ Taille des grilles : {taille_grille} num√©ros")
            
            # Initialiser le syst√®me optimis√©
            try:
                systeme_optimise = SystemeReduitOptimise(jeu_final, taille_grille)
                
                # Charger les num√©ros TOP
                if not systeme_optimise.charger_top_numeros(args.top_nombres):
                    print("‚ùå Impossible de charger les num√©ros TOP")
                    sys.exit(1)
                
                # G√©n√©rer les grilles optimis√©es
                if args.optimisation == 'pulp' and PULP_AVAILABLE:
                    grilles = systeme_optimise.generer_grilles_optimisees_pulp(args.grilles, taille_grille)
                else:
                    if args.optimisation == 'pulp' and not PULP_AVAILABLE:
                        print("‚ö†Ô∏è  PuLP non disponible, utilisation de l'algorithme glouton")
                    grilles = systeme_optimise.generer_grilles_optimisees_alternative(args.grilles, taille_grille)
                
                # Analyser les r√©sultats
                analyse_optimisee = systeme_optimise.analyser_couverture_optimisee(grilles)
                
                # Affichage des r√©sultats
                print(f"\nüé≤ GRILLES G√âN√âR√âES (MODE TOP CSV)")
                print("=" * 50)
                
                for i, grille in enumerate(grilles[:10], 1):
                    score_grille = sum(systeme_optimise.scores.get(num, 0) for num in grille) / len(grille)
                    print(f"Grille {i:2d} : {' - '.join(f'{n:2d}' for n in grille)} (Score: {score_grille:.3f})")
                
                if len(grilles) > 10:
                    print(f"... et {len(grilles) - 10} autres grilles")
                
                print(f"\nüìä ANALYSE OPTIMIS√âE")
                print("=" * 35)
                print(f"Grilles g√©n√©r√©es : {analyse_optimisee['nb_grilles']}")
                print(f"Num√©ros uniques utilis√©s : {analyse_optimisee['numeros_uniques_utilises']}")
                print(f"Couverture du pool TOP : {analyse_optimisee['couverture_pool']:.1f}%")
                print(f"Score moyen : {analyse_optimisee['score_moyen_global']:.3f}")
                print(f"Score max : {analyse_optimisee['score_max_grille']:.3f}")
                print(f"Score min : {analyse_optimisee['score_min_grille']:.3f}")
                print(f"√âquilibrage : {analyse_optimisee['equilibrage_score']:.1f}/100")
                
                # Export si demand√©
                if args.export:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    if jeu_final == 'loto':
                        nom_fichier = f"grilles_loto_top25_optimisees_{timestamp}"
                    else:
                        nom_fichier = f"grilles_keno_top30_optimisees_{timestamp}"
                    
                    # Export selon le format
                    if args.format == 'csv':
                        chemin_export = generateur._exporter_csv(grilles, analyse_optimisee, nom_fichier)
                    elif args.format == 'json':
                        chemin_export = generateur._exporter_json(grilles, analyse_optimisee, nom_fichier)
                    elif args.format in ['md', 'markdown']:
                        chemin_export = generateur._exporter_markdown(grilles, analyse_optimisee, nom_fichier)
                    else:
                        chemin_export = generateur._exporter_txt(grilles, analyse_optimisee, nom_fichier)
                    
                    print(f"\nüìÅ Export r√©ussi : {chemin_export}")
                
                print("\n‚úÖ G√©n√©ration TOP CSV termin√©e avec succ√®s !")
                return
                
            except Exception as e:
                print(f"‚ùå Erreur dans le mode TOP CSV : {e}")
                if args.verbose:
                    import traceback
                    traceback.print_exc()
                sys.exit(1)
        
        # G√©n√©ration normale (seulement si pas en mode TOP CSV)
        if nombres is None:
            print("‚ùå Erreur : Aucun num√©ro fourni pour la g√©n√©ration normale")
            sys.exit(1)
            
        resultats = generateur.generer(
            nombres=nombres,
            nb_grilles=args.grilles,
            garantie=args.garantie,
            methode=args.methode,
            nb_nombres_utilises=getattr(args, 'nombres_utilises', None),
            nombres_par_grille=getattr(args, 'nombres_par_grille', None),
            export=args.export,
            format_export=args.format
        )
        
        print("\n‚úÖ G√©n√©ration termin√©e avec succ√®s !")
        
        if args.verbose and resultats['fichier_export']:
            print(f"\nüìÅ Fichier g√©n√©r√© : {resultats['fichier_export']}")
            print(f"üìÇ Dossier de sortie : {generateur.output_path}")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  G√©n√©ration interrompue par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)
