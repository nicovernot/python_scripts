#!/usr/bin/env python3
"""
G√©n√©rateur de grilles Keno bas√© sur l'analyse FDJ

Ce script g√©n√®re des grilles Keno en utilisant les analyses 
statistiques des tirages pr√©c√©dents.
"""

import sys
from pathlib import Path
import argparse
from datetime import datetime

# Ajout du path parent pour acc√©der aux modules
sys.path.append(str(Path(__file__).parent.parent))

# Import des modules locaux
from grilles.generateur_grilles import GenerateurGrilles
import pandas as pd
import numpy as np
from collections import Counter

def analyser_donnees_keno():
    """Analyse les donn√©es Keno et retourne les num√©ros recommand√©s"""
    from pathlib import Path
    
    # Charger les donn√©es
    KENO_DATA_DIR = Path(__file__).parent / "keno_data"
    csv_files = list(KENO_DATA_DIR.glob("*.csv"))
    
    if not csv_files:
        return None, None
    
    try:
        df = pd.read_csv(csv_files[0], delimiter=';')
        ball_columns = [f'boule{i}' for i in range(1, 21)]
        
        # Analyser les fr√©quences
        all_numbers = Counter()
        for col in ball_columns:
            if col in df.columns:
                for num in df[col].dropna():
                    if pd.notna(num):
                        all_numbers[int(num)] += 1
        
        # Analyser les retards (derni√®re apparition)
        recent_draws = df.head(100)
        last_seen = {}
        
        for num in range(1, 71):
            found = False
            for idx in range(len(recent_draws)):
                row = recent_draws.iloc[idx]
                for col in ball_columns:
                    if col in row and pd.notna(row[col]) and int(row[col]) == num:
                        last_seen[num] = idx
                        found = True
                        break
                if found:
                    break
            if not found:
                last_seen[num] = 100
        
        # Extraire les num√©ros chauds et en retard
        most_common = all_numbers.most_common(15)
        delayed_numbers = sorted(last_seen.items(), key=lambda x: x[1], reverse=True)[:15]
        
        hot_numbers = [num for num, count in most_common]
        cold_numbers = [num for num, delay in delayed_numbers]
        
        return hot_numbers, cold_numbers
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        return None, None

def generer_grilles_keno_intelligentes(nb_grilles=5, taille_grille=10, utiliser_analyse=True):
    """G√©n√®re des grilles Keno bas√©es sur l'analyse statistique"""
    
    print("üéØ G√âN√âRATEUR DE GRILLES KENO INTELLIGENT")
    print("="*60)
    print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üé≤ G√©n√©ration de {nb_grilles} grilles de {taille_grille} num√©ros")
    print(f"üß† Analyse intelligente: {'Activ√©e' if utiliser_analyse else 'D√©sactiv√©e'}")
    print("-"*60)
    
    # 1. Analyse des donn√©es (simul√©es pour la d√©mo)
    numeros_recommandes = []
    
    if utiliser_analyse:
        print("\nüìä Analyse des tirages pr√©c√©dents...")
        
        # Analyser les donn√©es r√©elles
        hot_numbers, cold_numbers = analyser_donnees_keno()
        
        if hot_numbers is not None and cold_numbers is not None:
            # Combiner pour avoir une liste de num√©ros recommand√©s
            numeros_recommandes.extend(hot_numbers[:10])
            for numero in cold_numbers[:10]:
                if numero not in numeros_recommandes:
                    numeros_recommandes.append(numero)
            
            print(f"‚úÖ {len(numeros_recommandes)} num√©ros recommand√©s identifi√©s")
            print(f"üî• Num√©ros chauds: {hot_numbers[:5]}")
            print(f"‚ùÑÔ∏è Num√©ros en retard: {cold_numbers[:5]}")
        else:
            print("‚ö†Ô∏è Impossible de charger les donn√©es, g√©n√©ration al√©atoire")
            utiliser_analyse = False
    
    # 2. G√©n√©ration des grilles
    print(f"\nüé≤ G√©n√©ration de {nb_grilles} grilles...")
    
    # Cr√©er le g√©n√©rateur pour le Keno
    numeros_keno = list(range(1, 71))  # Num√©ros Keno 1-70
    
    grilles = []
    
    for i in range(nb_grilles):
        if utiliser_analyse and numeros_recommandes and i < 3:
            # Pour les 3 premi√®res grilles, utiliser l'analyse
            grille = generer_grille_avec_analyse(numeros_recommandes, taille_grille)
        else:
            # Grilles al√©atoires pour la diversit√©
            import random
            grille = random.sample(numeros_keno, taille_grille)
        
        grilles.append(sorted(grille))
        
        # Afficher la grille
        numeros_str = ' - '.join(f'{num:2d}' for num in sorted(grille))
        strategie = "üß† Analys√©e" if (utiliser_analyse and numeros_recommandes and i < 3) else "üé≤ Al√©atoire"
        print(f"   Grille {i+1:2d}: {numeros_str} {strategie}")
    
    # 3. Statistiques et conseils
    print(f"\nüìà Statistiques des grilles g√©n√©r√©es:")
    
    # Calculer la r√©partition par zones
    zones = {'1-23': 0, '24-46': 0, '47-70': 0}
    total_numeros = sum(len(grille) for grille in grilles)
    
    for grille in grilles:
        for numero in grille:
            if 1 <= numero <= 23:
                zones['1-23'] += 1
            elif 24 <= numero <= 46:
                zones['24-46'] += 1
            else:
                zones['47-70'] += 1
    
    for zone, count in zones.items():
        pourcentage = (count / total_numeros) * 100
        print(f"   Zone {zone}: {count:2d} num√©ros ({pourcentage:.1f}%)")
    
    # Conseils
    print(f"\nüí° Conseils de jeu:")
    print(f"   ‚Ä¢ Variez vos mises selon votre budget")
    print(f"   ‚Ä¢ Les grilles analys√©es utilisent les tendances r√©centes")
    print(f"   ‚Ä¢ Les grilles al√©atoires apportent de la diversit√©")
    print(f"   ‚Ä¢ Aucune m√©thode ne garantit un gain")
    
    return grilles

def generer_grille_avec_analyse(numeros_recommandes, taille_grille):
    """G√©n√®re une grille en utilisant l'analyse statistique"""
    
    import random
    
    grille = set()
    
    # 60% de la grille avec des num√©ros recommand√©s
    nb_recommandes = int(taille_grille * 0.6)
    recommandes_choisis = random.sample(numeros_recommandes[:20], 
                                      min(nb_recommandes, len(numeros_recommandes)))
    grille.update(recommandes_choisis)
    
    # Compl√©ter avec des num√©ros al√©atoires
    while len(grille) < taille_grille:
        numero = random.randint(1, 70)
        grille.add(numero)
    
    return list(grille)

def main():
    """Fonction principale"""
    
    parser = argparse.ArgumentParser(
        description="G√©n√©rateur de grilles Keno intelligent",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python generateur_keno_intelligent.py                     # 5 grilles de 10 num√©ros
  python generateur_keno_intelligent.py --grilles 10        # 10 grilles
  python generateur_keno_intelligent.py --taille 8          # Grilles de 8 num√©ros
  python generateur_keno_intelligent.py --sans-analyse      # Mode purement al√©atoire
        """
    )
    
    parser.add_argument(
        '--grilles',
        type=int,
        default=5,
        help='Nombre de grilles √† g√©n√©rer (d√©faut: 5)'
    )
    
    parser.add_argument(
        '--taille',
        type=int,
        default=10,
        choices=range(3, 21),
        help='Nombre de num√©ros par grille (3-20, d√©faut: 10)'
    )
    
    parser.add_argument(
        '--sans-analyse',
        action='store_true',
        help='G√©n√©ration purement al√©atoire (sans analyse)'
    )
    
    args = parser.parse_args()
    
    try:
        grilles = generer_grilles_keno_intelligentes(
            nb_grilles=args.grilles,
            taille_grille=args.taille,
            utiliser_analyse=not args.sans_analyse
        )
        
        print(f"\n‚úÖ {len(grilles)} grilles g√©n√©r√©es avec succ√®s!")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
